{"version":3,"sources":["store/Alarm.js","store/Clock.js","middleware/TickMiddleware.js","middleware/StarMiddleware.js","services/MusicService.js","services/Player.js","middleware/AlarmMiddleware.js","store/configureStore.js","components/SoundWrapper.js","components/Background.js","components/Stars.js","screens/ClockScreen.js","components/EnhancedPopup.js","screens/SettingsScreen.js","screens/WakeTimeSettingsScreen.js","screens/SleepTimeSettingsScreen.js","screens/SleepTimeItunesSelectionScreen.js","navigation/MainNavigator.js","App.js","serviceWorker.js","index.js"],"names":["TimeState","initalTimeState","alarmTime","alarmAction","manualTriggerAction","TICK","ALARM_TYPE_FAN","isSleepTimeFunc","now","wakeTime","sleepTime","wakeTimeFull","Date","getFullYear","getMonth","getDate","hour","minute","sleepTimeFull","initialWakeTime","daysOfWeek","initialSleepTime","initialState","wakeTimeState","stopMusicAfterMinutes","sleepTimeState","time","moment","format","isSleepTime","isFullScreen","isSettingWakeUpTime","isSettingSleepTime","shouldKeepAwake","screenSize","wakeTimeEnteredAt","sleepTimeEnteredAt","wakeTimePostTransitionTime","sleepTimePostTransitionTime","stars","enteredFullScreenTipDoNotShowAgain","allowAnalytics","actionCreators","tick","type","toggleIsSleepTime","toggleFullScreen","ensureNotFullScreen","setFullscreenTipSeen","setScreenSize","width","height","size","startSettingWakeUpAlarmTime","endSettingWakeUpAlarmTime","selectedTime","startSettingSleepAlarmTime","endSettingSleepAlarmTime","cancelSetWakeUpAlarmTime","cancelSetSleepAlarmTime","setWakeAlarmType","newType","subType","alarmType","setSleepAlarmType","setManualWakeType","setManualSleepType","addStar","boundary","clearStars","setAnalyticsAllowed","isAllowed","setWakeMusicTime","setSleepMusicTime","initialized","currentlyAddingStars","addStarRecursive","store","options","clockState","getState","clock","theseOptions","numToAdd","numStarsToAdd","Error","i","dispatch","top","left","right","bottom","allowRecursion","length","randomStepSize","setTimeout","MusicService","Promise","resolve","reject","arr","temporaryValue","randomIndex","newArray","slice","currentIndex","Math","floor","random","playlistName","currentPlaylist","name","isITunesPaused","resumeNextSongError","Alert","baseMusicUrl","Player","ids","this","playlistIds","that","prepareSongs","nextSongPromise","error","song","shift","isAutoplayingNextSong","then","currentSong","startPlayTime","prepareNextSong","soundRef","current","setState","prevState","Object","objectSpread","url","playStatus","Sound","status","PLAYING","onFinishedPlaying","catch","playError","playNextSong","onSongFinished","ensureCurrentSongStopped","stoppedSong","console","log","stopCurrentSongError","currentlyPlayingSong","sound","STOPPED","Platform","OS","stopSongIfPlaying","cutoffDate","getTime","nextStatus","loadSongError","reducers","storeState","action","state","toDate","isSleepTimeOverriden","theoreticalSleepTime","actualIsSleepTime","getHours","getMinutes","alarmSubAction","position","x","y","brightness","starIndex","concat","rootReducer","combineReducers","middlewares","next","secondsToNextMinute","getSeconds","nextResult","nextClockState","nextIsSleepTime","currentNumberOfStars","initialWaitTime","millisPastEnteredAt","numStarsShouldHaveAdded","createStore","applyMiddleware","apply","SoundWrapper","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_this$state","react_default","a","createElement","lib_default","Component","darkColorBegin","darkColorEnd","lightColorBegin","lightColorEnd","hexToRgba","hex","returnValue","push","c","test","substring","split","r","join","g","b","componentToHex","toString","rgbToHex","ceil","AnimatableGradient","_Component","props","backgroundColors","inherits","createClass","key","value","setBackgroundColors","nextProps","settingBackgroundColors","cancel","beginColors","startBrightness","endAnimationTime","animationFunc","animateBackgroundGrandient","animationStatus","cancelled","endColors","endBrightness","postTransitionTime","animationFunc2","fromColors","toColors","enteredStateAt","startTime","endTime","stepSize","fromBrightness","toBrightness","settingBackgroundColors1","settingBackgroundColors2","currentColors","percentDone","fromColorsHex","toColorsHex","TimerMixin","children","react_native_web_linear_gradient_dist_default","colors","style","View","getDefaultProps","connect","bindActionCreators","Stars","data","_this2","map","starInfo","keyName","starData","uri","Image","source","styles","StyleSheet","create","container","flex","flexDirection","backgroundColor","alignItems","justifyContent","clockIcon","color","fontSize","Clock","React","createRef","_Dimensions$get","Dimensions","get","orientation","screenWidth","screenHeight","addEventListener","newDimensions","_this$props","navigation","setParams","onToggleFullScreen","_this$props2","alert","_this$state2","isLandscape","padding","_this$props3","playFanOrPause","playITunesPlaylist","playOrPause","class","_this3","_this$props4","TouchableWithoutFeedback","onLongPress","onPress","singleTap","StatusBar","hidden","Background","components_Stars","clockStyle","TouchableHighlight","renderClockIcon","Text","timeTextStyle","numberOfLines","SoundWrapper_SoundWrapper","ref","navigationOptions","_ref","params","DefaultHeaderStyle","title","button","margin","borderRadius","borderColor","EnhancedPopup","onCancelPressed","onConfirmPressed","showCancelButton","showConfirmButton","TouchableOpacity","onConfirmButtonPressed","visible","deviceWidth","deviceHeight","Modal","onRequestClose","animationType","transparent","backdropOpacity","modalViewWrapperStyle","commandButtonsWrapperStyle","renderControlButtons","PureComponent","fontAwesomeSettingsIcon","textAlignVertical","emptySettingsIcon","modalView","aboutText","marginTop","Settings","isAboutModalVisible","setHours","setMinutes","setDate","theTimeFormatted","EnhancedPopup_EnhancedPopup","onAboutPopupConfirmPressed","settingsHeader","paddingTop","WakeTimeSettingsScreen","SleepTimeSettingsScreen","playMusicForModalVisible","minimumHoursForMusic","minimumMinutesForMusic","isMinumimTimeForMusicDirty","hoursNumericElement","minutesNumericElement","minutes","minumumHoursForMusic","timeAmount","forceUpdate","showCancelButto","onSelectPlayMusicTimePopupCancelPressed","onSelectPlayMusicTimePopupConfirmPressed","SleepTimeITunesSelection","playlists","getPlaylists","getPlaylistsError","playlist","headerStyle","headerTintColor","headerTitleStyle","fontWeight","RootStack","createSwitchNavigator","Home","screen","ClockScreen","SettingsScreen","WakeTimeSettings","SleepTimeSettings","SleepTimeItunesMusicSettings","AppContainer","createBrowserApp","MainNavigator","App","es","navigation_MainNavigator","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9456dec.chunk.js","sourcesContent":["export const SET_ALARM_TIME = 'clock/alarm/SET_ALARM_TIME';\nexport const CANCEL_SET_ALARM_TIME = 'clock/alarm/CANCEL_SET_ALARM_TIME';\n\nexport const actionCreators = {\n  setAlarmTime: () => ({ type: SET_ALARM_TIME }),\n  cancelSetAlarmTime: () => ({ type: CANCEL_SET_ALARM_TIME }),\n};\n\nexport function TimeState(initalTimeState) {\n  return {\n    alarmTime: initalTimeState.alarmTime,\n    alarmAction: initalTimeState.alarmAction,\n    manualTriggerAction: initalTimeState.manualTriggerAction,\n  };\n}\n","// import Analytics from 'appcenter-analytics';\nimport moment from 'moment';\nimport { TimeState } from './Alarm';\n\nexport const TICK = 'clock/TICK';\nexport const TOGGLE_SLEEP_TIME = 'clock/TOGGLE_SLEEP_TIME';\nexport const TOGGLE_FULL_SCREEN = 'clock/TOGGLE_FULL_SCREEN';\nexport const ENSURE_NOT_FULL_SCREEN = 'clock/ENSURE_NOT_FULL_SCREEN';\nexport const SET_FULL_SCREEN_TIP_SEEN = 'clock/SET_FULL_SCREEN_TIP_SEEN';\nexport const SET_SCREEN_SIZE = 'clock/SET_SCREEN_SIZE';\nexport const START_SETTING_WAKE_UP_ALARM_TIME = 'clock/alarm/START_SETTING_WAKE_UP_ALARM_TIME';\nexport const END_SETTING_WAKE_UP_ALARM_TIME = 'clock/alarm/END_SETTING_WAKE_UP_ALARM_TIME';\nexport const START_SETTING_SLEEP_ALARM_TIME = 'clock/alarm/START_SETTING_SLEEP_ALARM_TIME';\nexport const END_SETTING_SLEEP_ALARM_TIME = 'clock/alarm/END_SETTING_SLEEP_ALARM_TIME';\nexport const CANCEL_SET_WAKE_UP_ALARM_TIME = 'clock/alarm/CANCEL_SET_WAKE_UP_ALARM_TIME';\nexport const CANCEL_SET_SLEEP_ALARM_TIME = 'clock/alarm/CANCEL_SET_SLEEP_ALARM_TIME';\nexport const SET_WAKE_ALARM_TYPE = 'clock/alarm/SET_WAKE_ALARM_TYPE';\nexport const SET_SLEEP_ALARM_TYPE = 'clock/alarm/SET_SLEEP_ALARM_TYPE';\nexport const SET_MANUAL_WAKE_TYPE = 'clock/alarm/SET_MANUAL_WAKE_TYPE';\nexport const SET_MANUAL_SLEEP_TYPE = 'clock/alarm/SET_MANUAL_SLEEP_TYPE';\nexport const ADD_STAR = 'clock/stars/ADD_STAR';\nexport const CLEAR_STARS = 'clock/stars/CLEAR_STARS';\nexport const SET_ANALYTICS_ALLOWED = 'clock/SET_ANALYTICS_ALLOWED';\nexport const SET_WAKE_MUSIC_TIME = 'clock/SET_WAKE_MUSIC_TIME';\nexport const SET_SLEEP_MUSIC_TIME = 'clock/SET_SLEEP_MUSIC_TIME';\n\nexport const ALARM_TYPE_NONE = 'clock/alarm/NONE';\nexport const ALARM_TYPE_PLAY_BUILTIN_MUSIC = 'clock/alarm/PLAY_BUILTIN_MUSIC';\nexport const ALARM_TYPE_FAN = 'clock/alarm/PLAY_FAN_NOISE';\nexport const ALARM_TYPE_ITUNES_PLAYLIST = 'clock/alarm/PLAY_ITUNES_PLAYLIST';\n\nconst isSleepTimeFunc = (now, wakeTime, sleepTime) => {\n  const wakeTimeFull = new Date(\n    now.getFullYear(),\n    now.getMonth(),\n    now.getDate(),\n    wakeTime.hour,\n    wakeTime.minute,\n    0,\n  );\n  const sleepTimeFull = new Date(\n    now.getFullYear(),\n    now.getMonth(),\n    now.getDate(),\n    sleepTime.hour,\n    sleepTime.minute,\n    0,\n  );\n  if (wakeTimeFull <= sleepTimeFull) {\n    if (now < wakeTimeFull) {\n      return true;\n    }\n\n    return now >= sleepTimeFull;\n  }\n  if (now < sleepTimeFull) {\n    return false;\n  }\n  return now < wakeTimeFull;\n};\n\nconst initialWakeTime = {\n  hour: 12,\n  minute: 0,\n  daysOfWeek: [0, 1, 2, 3, 4, 5, 6],\n};\n\nconst initialSleepTime = {\n  hour: 12,\n  minute: 1,\n  daysOfWeek: [0, 1, 2, 3, 4, 5, 6],\n};\n\nconst initialState = {\n  wakeTimeState: new TimeState({\n    alarmTime: initialWakeTime,\n    alarmAction: ALARM_TYPE_PLAY_BUILTIN_MUSIC,\n    manualTriggerAction: ALARM_TYPE_PLAY_BUILTIN_MUSIC,\n    stopMusicAfterMinutes: 15,\n  }),\n  sleepTimeState: new TimeState({\n    alarmTime: initialSleepTime,\n    alarmAction: ALARM_TYPE_PLAY_BUILTIN_MUSIC,\n    manualTriggerAction: ALARM_TYPE_PLAY_BUILTIN_MUSIC,\n    stopMusicAfterMinutes: 15,\n  }),\n  time: moment().format('LT'),\n  isSleepTime: isSleepTimeFunc(new Date(), initialWakeTime, initialSleepTime),\n  isFullScreen: false,\n  isSettingWakeUpTime: false,\n  isSettingSleepTime: false,\n  shouldKeepAwake: true,\n  screenSize: [800, 600],\n  wakeTimeEnteredAt: null,\n  sleepTimeEnteredAt: null,\n  wakeTimePostTransitionTime: 1000,\n  sleepTimePostTransitionTime:  1000,\n  stars: [],\n  enteredFullScreenTipDoNotShowAgain: false,\n  allowAnalytics: true,\n};\n\nexport const actionCreators = {\n  tick: () => ({ type: TICK }),\n  toggleIsSleepTime: () => ({ type: TOGGLE_SLEEP_TIME }),\n  toggleFullScreen: () => ({ type: TOGGLE_FULL_SCREEN }),\n  ensureNotFullScreen: () => ({ type: ENSURE_NOT_FULL_SCREEN }),\n  setFullscreenTipSeen: () => ({ type: SET_FULL_SCREEN_TIP_SEEN }),\n  setScreenSize: (width, height) => ({\n    type: SET_SCREEN_SIZE,\n    size: { width, height },\n  }),\n  startSettingWakeUpAlarmTime: () => ({ type: START_SETTING_WAKE_UP_ALARM_TIME }),\n  endSettingWakeUpAlarmTime: selectedTime => ({\n    type: END_SETTING_WAKE_UP_ALARM_TIME,\n    time: selectedTime,\n  }),\n  startSettingSleepAlarmTime: () => ({ type: START_SETTING_SLEEP_ALARM_TIME }),\n  endSettingSleepAlarmTime: selectedTime => ({\n    type: END_SETTING_SLEEP_ALARM_TIME,\n    time: selectedTime,\n  }),\n  cancelSetWakeUpAlarmTime: () => ({ type: CANCEL_SET_WAKE_UP_ALARM_TIME }),\n  cancelSetSleepAlarmTime: () => ({ type: CANCEL_SET_SLEEP_ALARM_TIME }),\n  setWakeAlarmType: (newType, subType) => ({\n    type: SET_WAKE_ALARM_TYPE,\n    alarmType: newType,\n    subType,\n  }),\n  setSleepAlarmType: (newType, subType) => ({\n    type: SET_SLEEP_ALARM_TYPE,\n    alarmType: newType,\n    subType,\n  }),\n  setManualWakeType: newType => ({ type: SET_MANUAL_WAKE_TYPE, alarmType: newType }),\n  setManualSleepType: newType => ({ type: SET_MANUAL_SLEEP_TYPE, alarmType: newType }),\n  addStar: boundary => ({\n    type: ADD_STAR,\n    boundary,\n  }),\n  clearStars: () => ({ type: CLEAR_STARS }),\n  setAnalyticsAllowed: isAllowed => ({ type: SET_ANALYTICS_ALLOWED, isAllowed }),\n  setWakeMusicTime: time => ({ type: SET_WAKE_MUSIC_TIME, time }),\n  setSleepMusicTime: time => ({ type: SET_SLEEP_MUSIC_TIME, time }),\n};\n\nexport const reducer = (storeState, action) => {\n  const state = storeState || initialState;\n\n  // fix for previous versions\n  if (typeof state.stars === 'undefined') {\n    state.stars = [];\n  }\n\n  if (action.type === TICK) {\n    const now = moment();\n    let isSleepTime = isSleepTimeFunc(\n      now.toDate(),\n      state.wakeTimeState.alarmTime,\n      state.sleepTimeState.alarmTime,\n    );\n\n    let { sleepTimeEnteredAt, wakeTimeEnteredAt, isSleepTimeOverriden } = state;\n\n    if (isSleepTimeOverriden && typeof state.isSleepTime !== 'undefined') {\n      if (isSleepTime === state.isSleepTime) {\n        // if here than we just transitioned into the sleepTime that\n        // we overrode. So, it's no longer an override.\n        isSleepTimeOverriden = false;\n      } else {\n        // otherwise we'll use the override state of isSleepTime\n        // eslint-disable-next-line prefer-destructuring\n        isSleepTime = state.isSleepTime;\n      }\n    }\n\n    if (state.isSleepTime !== isSleepTime && typeof state.isSleepTime !== 'undefined') {\n      // if here we will be transitioning into or out of sleep\n      if (isSleepTime) {\n        sleepTimeEnteredAt = now;\n        wakeTimeEnteredAt = null;\n      } else {\n        wakeTimeEnteredAt = now;\n        sleepTimeEnteredAt = null;\n      }\n    }\n    return {\n      ...state,\n      time: now.format('LT'),\n      isSleepTime,\n      isSleepTimeOverriden,\n      wakeTimeEnteredAt,\n      sleepTimeEnteredAt,\n    };\n  }\n  if (action.type === TOGGLE_SLEEP_TIME) {\n    const now = moment();\n    const theoreticalSleepTime = isSleepTimeFunc(\n      now.toDate(),\n      state.wakeTimeState.alarmTime,\n      state.sleepTimeState.alarmTime,\n    );\n    const actualIsSleepTime = !state.isSleepTime;\n\n    let { sleepTimeEnteredAt, wakeTimeEnteredAt } = state;\n    if (actualIsSleepTime) {\n      sleepTimeEnteredAt = now;\n      wakeTimeEnteredAt = null;\n    } else {\n      wakeTimeEnteredAt = now;\n      sleepTimeEnteredAt = null;\n    }\n    // Analytics.trackEvent('Sleep time Toggled', {\n    //   Category: 'User',\n    //   IsSleepTime: actualIsSleepTime,\n    // });\n    return {\n      ...state,\n      isSleepTime: actualIsSleepTime,\n      // note isSleepTimeOverriden is true only when isSleepTime is not what its \"supposed\" to be\n      isSleepTimeOverriden: theoreticalSleepTime !== actualIsSleepTime,\n      wakeTimeEnteredAt,\n      sleepTimeEnteredAt,\n    };\n  }\n  if (action.type === TOGGLE_FULL_SCREEN) {\n    return {\n      ...state,\n      isFullScreen: !state.isFullScreen,\n    };\n  }\n  if (action.type === ENSURE_NOT_FULL_SCREEN) {\n    return {\n      ...state,\n      isFullScreen: false,\n    };\n  }\n  if (action.type === SET_FULL_SCREEN_TIP_SEEN) {\n    return {\n      ...state,\n      enteredFullScreenTipDoNotShowAgain: true,\n    };\n  }\n  if (action.type === SET_SCREEN_SIZE) {\n    return {\n      ...state,\n      screenSize: [action.size.width, action.size.height],\n    };\n  }\n  if (action.type === START_SETTING_WAKE_UP_ALARM_TIME) {\n    return {\n      ...state,\n      isSettingWakeUpTime: true,\n    };\n  }\n  if (action.type === START_SETTING_SLEEP_ALARM_TIME) {\n    return {\n      ...state,\n      isSettingSleepTime: true,\n    };\n  }\n  if (action.type === END_SETTING_WAKE_UP_ALARM_TIME) {\n    // Analytics.trackEvent('Wake Time Set', {\n    //   Category: 'Alarm',\n    //   Hour: action.time.getHours(),\n    //   Minute: action.time.getMinutes(),\n    // });\n    return {\n      ...state,\n      wakeTimeState: {\n        ...state.wakeTimeState,\n        alarmTime: {\n          ...state.wakeTimeState.alarmTime,\n          hour: action.time.getHours(),\n          minute: action.time.getMinutes(),\n        },\n      },\n      isSettingWakeUpTime: false,\n    };\n  }\n  if (action.type === END_SETTING_SLEEP_ALARM_TIME) {\n    // Analytics.trackEvent('Sleep Time Set', {\n    //   Category: 'Alarm',\n    //   Hour: action.time.getHours(),\n    //   Minute: action.time.getMinutes(),\n    // });\n    return {\n      ...state,\n      sleepTimeState: {\n        ...state.sleepTimeState,\n        alarmTime: {\n          ...state.sleepTimeState.alarmTime,\n          hour: action.time.getHours(),\n          minute: action.time.getMinutes(),\n        },\n      },\n      isSettingSleepTime: false,\n    };\n  }\n  if (action.type === CANCEL_SET_WAKE_UP_ALARM_TIME) {\n    return {\n      ...state,\n      isSettingWakeUpTime: false,\n    };\n  }\n  if (action.type === CANCEL_SET_SLEEP_ALARM_TIME) {\n    return {\n      ...state,\n      isSettingSleepTime: false,\n    };\n  }\n  if (action.type === SET_WAKE_ALARM_TYPE) {\n    // Analytics.trackEvent('Wake alarm type set', { Category: 'Alarm', Action: action.alarmType });\n    return {\n      ...state,\n      wakeTimeState: {\n        ...state.wakeTimeState,\n        alarmAction: action.alarmType,\n        alarmSubAction: action.subType,\n      },\n    };\n  }\n  if (action.type === SET_SLEEP_ALARM_TYPE) {\n    // Analytics.trackEvent('Sleep alarm type set', { Category: 'Alarm', Action: action.alarmType });\n    return {\n      ...state,\n      sleepTimeState: {\n        ...state.sleepTimeState,\n        alarmAction: action.alarmType,\n        alarmSubAction: action.subType,\n      },\n    };\n  }\n  if (action.type === SET_MANUAL_WAKE_TYPE) {\n    return {\n      ...state,\n      wakeTimeState: {\n        ...state.wakeTimeState,\n        manualTriggerAction: action.alarmType,\n      },\n    };\n  }\n  if (action.type === SET_MANUAL_SLEEP_TYPE) {\n    return {\n      ...state,\n      sleepTimeState: {\n        ...state.sleepTimeState,\n        manualTriggerAction: action.alarmType,\n      },\n    };\n  }\n  if (action.type === ADD_STAR) {\n    const position = {\n      x: Math.floor(\n        Math.random() * (action.boundary.right - action.boundary.left) + action.boundary.left,\n      ),\n      y: Math.floor(\n        Math.random() * (action.boundary.bottom - action.boundary.top) + action.boundary.top,\n      ),\n    };\n    // add a penalty for brightness the farther down a star is\n    const brightness = Math.floor(Math.random() * 255);\n    const starIndex = Math.floor(Math.random() * 65536);\n\n    const stars = state.stars || [];\n    return {\n      ...state,\n      stars: stars.concat([{ position, brightness, starIndex }]),\n    };\n  }\n  if (action.type === CLEAR_STARS) {\n    return {\n      ...state,\n      stars: [],\n    };\n  }\n  if (action.type === SET_ANALYTICS_ALLOWED) {\n    // Analytics.setEnabled(action.isAllowed)\n    //   .then(() => { });\n    // .catch((setAnlyticsEnabledError) => {\n    //   alert('setting analyics error: ' + setAnlyticsEnabledError);\n    // });\n    return {\n      ...state,\n      allowAnalytics: action.isAllowed,\n    };\n  }\n  if (action.type === SET_WAKE_MUSIC_TIME) {\n    return {\n      ...state,\n      wakeTimeState: {\n        ...state.wakeTimeState,\n        stopMusicAfterMinutes: action.time,\n      },\n    };\n  }\n  if (action.type === SET_SLEEP_MUSIC_TIME) {\n    return {\n      ...state,\n      sleepTimeState: {\n        ...state.sleepTimeState,\n        stopMusicAfterMinutes: action.time,\n      },\n    };\n  }\n\n  return state;\n};\n","// import Analytics from 'appcenter-analytics';\nimport { actionCreators } from '../store/Clock';\n\nconst tick = (store) => {\n  store.dispatch(actionCreators.tick());\n  const secondsToNextMinute = 60 - new Date().getSeconds();\n  setTimeout(() => tick(store), secondsToNextMinute * 1000);\n};\n\nlet initialized = false;\n\n\nexport default store => next => (action) => {\n  next(action);\n  if (!initialized) {\n    initialized = true;\n    // from inspection, this is the first action in our stack\n    // so start ticking!\n    tick(store);\n    // Analytics.trackEvent('App Starting');\n  }\n};\n","// import Analytics from 'appcenter-analytics';\nimport { actionCreators, TOGGLE_SLEEP_TIME, TICK } from '../store/Clock';\n\nconst numStars = 400;\n// const initialWaitTime = 15 * 60 * 1000; // in milliseconds, past when we enter the state\n\nlet initialized = false;\nlet currentlyAddingStars = false;\n\n// This is the (guassian) distribution of the rate stars are added.\n// On average, the stars will be added with a rate of 500ms and a std dev of 200\n// EDIT: Removed gaussian distribution because it didn't work well on IOS\nconst stepSizeDistribution = 20;\n\nconst addStarRecursive = (store, options) => {\n  const clockState = (store.getState() || {}).clock || {};\n\n  if (!clockState.isSleepTime) {\n    // well we can just stop.\n    currentlyAddingStars = false;\n    return;\n  }\n\n  const theseOptions = options || {};\n  const numToAdd = theseOptions.numStarsToAdd || 1;\n  if (numToAdd < 1) {\n    currentlyAddingStars = false;\n    // Analytics.trackEvent('Invalid numStarsToAdd', { Category: 'StarMiddleware' });\n    throw new Error('Invalid numStarsToAdd');\n  }\n\n  currentlyAddingStars = true;\n\n  for (let i = 0; i < numToAdd; i += 1) {\n    // const maxWidthHeight = 362; clockState.screenSize[0] > clockState.screenSize[1]\n    //   ? clockState.screenSize[0]\n    //   : clockState.screenSize[1];\n    const maxHeight = 362/2;\n    const maxWidth = 700/2;\n    // const boundary = Math.floor(maxWidthHeight / 2);\n    store.dispatch(\n      actionCreators.addStar({\n        top: 0,\n        left: -(maxWidth),\n        right: maxWidth,\n        bottom: 2 * maxHeight,\n      }),\n    );\n  }\n\n  const allowRecursion = typeof theseOptions.allowRecursion === 'undefined' ? true : theseOptions.allowRecursion;\n  if (allowRecursion) {\n    const stars = clockState.stars || [];\n    if (stars.length < numStars) {\n      // we'll add another after a set time\n      let randomStepSize = stepSizeDistribution; // .ppf(Math.random());\n      if (randomStepSize < 10) {\n        // ensure at least 10 milliseconds\n        randomStepSize = 10;\n      }\n      setTimeout(() => addStarRecursive(store), randomStepSize);\n    } else {\n      currentlyAddingStars = false;\n    }\n  } else {\n    currentlyAddingStars = false;\n  }\n};\n\nexport default store => next => (action) => {\n  if (typeof store.getState !== 'function') {\n    // easy case - this will not be a change to state.\n    // this happens e.g. on application startup\n    return next(action);\n  }\n\n  // const previousClockState = (store.getState() || {}).clock;\n  const nextResult = next(action);\n\n  if (action.type === 'persist/PERSIST') {\n    // This is an early action before the state is recreated,\n    // so the state is in initialState. We can ignore this.\n    return nextResult;\n  }\n\n  const nextClockState = (store.getState() || {}).clock;\n\n  // const previousIsSleepTime = (previousClockState || {}).isSleepTime;\n  const nextIsSleepTime = (nextClockState || {}).isSleepTime;\n\n  if (action.type === TOGGLE_SLEEP_TIME) {\n    if (!nextIsSleepTime) {\n      // we are transitioning to wake time. Get rid of the stars.\n      currentlyAddingStars = false;\n      store.dispatch(actionCreators.clearStars());\n    } else {\n      // force a store action in sleepTimePostTransitionTime\n      // to make the stars appear\n      setTimeout(() => {\n        store.dispatch(actionCreators.tick());\n      }, nextClockState.sleepTimePostTransitionTime + 100);\n    }\n  } \n\n  if (action.type === TICK) {\n    if (nextIsSleepTime) {\n      const currentNumberOfStars = nextClockState.stars.length;\n      let initialWaitTime = nextClockState.sleepTimePostTransitionTime;\n      if (!initialWaitTime) {\n        initialWaitTime = 60 * 1000;\n      }\n\n      if (!initialized || currentNumberOfStars < numStars) {\n        // we should start adding stars, but let's ensure we wait a certain\n        // amount of time first, an \"initialWaitTime\"\n        let { sleepTimeEnteredAt } = nextClockState;\n        if (typeof sleepTimeEnteredAt === 'string') {\n          sleepTimeEnteredAt = new Date(sleepTimeEnteredAt);\n        }\n\n        const millisPastEnteredAt = new Date() - sleepTimeEnteredAt;\n        if (millisPastEnteredAt > initialWaitTime) {\n          // then we need to start adding stars.\n          if (!initialized) {\n            initialized = true;\n            // Analytics.trackEvent('Adding stars (1)', { Category: 'Debug' });\n\n            // if we are here we are just initializing the app\n            let numStarsShouldHaveAdded = Math.floor(\n              (millisPastEnteredAt - initialWaitTime) / stepSizeDistribution,\n            );\n            if (numStarsShouldHaveAdded > numStars) {\n              numStarsShouldHaveAdded = numStars;\n            }\n            addStarRecursive(store, {\n              numStarsToAdd: numStarsShouldHaveAdded,\n              allowRecursion: false,\n            });\n          } else if (!currentlyAddingStars) {\n            // Analytics.trackEvent('Adding stars (2)', { Category: 'Debug' });\n            addStarRecursive(store);\n          } else {\n            // Analytics.trackEvent('Not Adding stars (3)', { Category: 'Debug' });\n          }\n        }\n      }\n    } else {\n      // ensure we don't have any stars\n      const currentNumberOfStars = nextClockState.stars.length;\n      if (currentNumberOfStars > 0) {\n        store.dispatch(actionCreators.clearStars());\n      }\n    }\n  }\n\n  return nextResult;\n};\n","// import Analytics from 'appcenter-analytics';\nimport { Alert, Platform } from 'react-native';\n// import iTunes from 'react-native-itunes';\n\nexport default class MusicService {\n  static isITunesPaused = false;\n\n  static currentPlaylist = null;\n\n  static getPlaylists() {\n    return new Promise((resolve, reject) => {\n      // if (Platform.OS === 'ios') {\n      //   iTunes\n      //     .getPlaylists()\n      //     .then((playlists) => {\n      //       resolve(playlists);\n      //     })\n      //     .catch(reject);\n      // } else {\n      //   // Analytics.trackEvent('Can only get playlists on IOS devices', { Category: 'MusicService' });\n      //   reject(new Error('Can only get playlists on IOS devices'));\n      // }\n      return [];\n    });\n  }\n\n  static randomizeArray(arr) {\n    // this method is not optimized for performance\n\n    // randomize the array (Fisher-Yates algorithm)\n    const newArray = arr.slice(0);\n    let currentIndex = newArray.length;\n    let temporaryValue;\n    let randomIndex;\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = newArray[currentIndex];\n      newArray[currentIndex] = newArray[randomIndex];\n      newArray[randomIndex] = temporaryValue;\n    }\n    return newArray;\n  }\n\n  static playPlaylist(playlistName) {\n    return new Promise((resolve, reject) => {\n      if (MusicService.currentPlaylist && MusicService.currentPlaylist.name === playlistName) {\n        try {\n          // iTunes.next();\n        } catch (playNextSongInPlaylistError) {\n          // Analytics.trackEvent('Unable to move to the next song in playlist', {\n          //   Category: 'MusicService',\n          //   Error: playNextSongInPlaylistError,\n          // });\n          Alert.Alert('Unable to move to next track!');\n        }\n        try {\n          // iTunes.play();\n          MusicService.isITunesPaused = false;\n        } catch (resumeNextSongError) {\n          // Analytics.trackEvent('Unable to play next song in playlist', {\n          //   Category: 'MusicService',\n          //   Error: resumeNextSongError,\n          // });\n          Alert.Alert('Unable to play next track!');\n        }\n        // ensure a song is playing (i.e. playlist isn't exhausted!)\n      } else {\n        resolve(null);\n        // iTunes\n        //   .getPlaylists({ query: { name: playlistName } })\n        //   .then((playlists) => {\n        //     if (playlists.length > 0) {\n        //       const { tracks } = playlists[0];\n        //       const randomizedTracks = MusicService.randomizeArray(tracks);\n        //       MusicService.currentPlaylist = {\n        //         name: playlistName,\n        //         tracks: randomizedTracks,\n        //       };\n        //       iTunes\n        //         .playTracks(randomizedTracks)\n        //         .then(() => {\n        //           MusicService.isITunesPaused = false;\n        //           resolve();\n        //         })\n        //         .catch(reject);\n        //     } else {\n        //       // Analytics.trackEvent('No playlists found', { Category: 'MusicService' });\n        //       reject(new Error(`No playlists with name ${playlistName} found`));\n        //     }\n        //   })\n        //   .catch((playITunesPlastlistError) => {\n        //     // Analytics.trackEvent('Error getting iTunes playlists', {\n        //     //   Category: 'MusicService',\n        //     //   Error: playITunesPlastlistError,\n        //     // });\n        //     reject(new Error(`Error getting iTunes playlists: ${playITunesPlastlistError}`));\n        //   });\n      }\n    });\n  }\n\n  static stopSongIfPlaying() {\n    return new Promise((resolve, reject) => {\n      if (MusicService.isITunesPaused) {\n        // if here we know there isn't a song playing\n        resolve(null);\n      } else {\n        resolve(null);\n        // try {\n        //   iTunes\n        //     .getCurrentTrack()\n        //     .then((trackItem) => {\n        //       // Analytics.trackEvent('stopSongIfPlaying', { Category: 'Debug' });\n\n        //       if (trackItem) {\n        //         // all we can do here is pause the song, because that's all the API lets us do\n        //         try {\n        //           // Analytics.trackEvent('stopSongIfPlaying - pausing iTunes', { Category: 'Debug' });\n        //           iTunes.pause();\n        //           MusicService.isITunesPaused = true;\n        //           // Analytics.trackEvent('stopSongIfPlaying - paused iTunes', { Category: 'Debug' });\n        //           resolve(trackItem);\n        //         } catch (pauseExcption) {\n        //           // Analytics.trackEvent('Unable to stop current song', {\n        //           //   Category: 'MusicService',\n        //           //   Error: pauseExcption,\n        //           // });\n        //           reject(new Error(`Unable to stop current song: ${pauseExcption}`));\n        //         }\n        //       } else {\n        //         // Analytics.trackEvent('stopSongIfPlaying - no song playing', {\n        //         //   Category: 'MusicService',\n        //         // });\n        //         resolve(null);\n        //       }\n        //     })\n        //     .catch((onGetCurrentTrackError) => {\n        //       // Analytics.trackEvent('Cannot get current iTunes track (1)', {\n        //       //   Category: 'MusicService',\n        //       //   Error: onGetCurrentTrackError,\n        //       // });\n        //       reject(onGetCurrentTrackError);\n        //     });\n        // } catch (iTunesSongError) {\n        //   // Analytics.trackEvent('Cannot get current iTunes track', {\n        //   //   Category: 'MusicService',\n        //   //   Error: iTunesSongError,\n        //   // });\n        //   Alert.Alert(`Cannot get current iTunes track: ${iTunesSongError}`);\n        // }\n      }\n    });\n  }\n}\n","// import Analytics from 'appcenter-analytics';\n// import iTunes from 'react-native-itunes';\nimport { Alert, Platform } from 'react-native';\nimport Sound from 'react-sound';\nimport MusicService from './MusicService';\n\n// const Sound = require('react-native-sound');\n\n// Enable playback in silence mode\n// Sound.setCategory('Playback');\n\n// const prepareFanNoise = () => new Promise((resolve, error) => {\n//   const fan = new Sound('fan.mp3', Sound.MAIN_BUNDLE, (loadSongError) => {\n//     if (loadSongError) {\n//       error(loadSongError);\n//     } else {\n//       resolve(fan);\n//     }\n//   });\n//   return fan;\n// });\n\nconst baseMusicUrl = 'https://sunandstars.app:443/wp-content/uploads/2019/01/';\n\nexport default class Player {\n  static currentSong = null;\n\n  static startPlayTime = null;\n\n  static nextSongPromise = null;\n\n  static playlistIds = [];\n\n  // static fanNoisePromise = prepareFanNoise();\n\n  static prepareSongs() {\n    // create an array numbered 0 to 8\n    // const ids = Array(...{ length: 9 }).map(Number.call, Number);\n    const ids = [];\n    for (let i = 0; i < 9; i += 1) {\n      ids[i] = i;\n    }\n\n    // randomize the array (Fisher-Yates algorithm)\n    let currentIndex = ids.length; let temporaryValue; let\n      randomIndex;\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = ids[currentIndex];\n      ids[currentIndex] = ids[randomIndex];\n      ids[randomIndex] = temporaryValue;\n    }\n\n    this.playlistIds = ids;\n  }\n\n  static prepareNextSong() {\n    const that = this;\n    if (that.playlistIds.length === 0) {\n      that.prepareSongs();\n    }\n\n    this.nextSongPromise = new Promise((resolve, error) => {\n      let song = null;\n      switch (that.playlistIds.shift()) {\n        case 0: {\n          song = baseMusicUrl + 'autumn.mp3';\n          break;\n        }\n        case 1: {\n          song = baseMusicUrl + 'awake.mp3';\n          break;\n        }\n        case 2: {\n          song = baseMusicUrl + 'falling_free.mp3';\n          break;\n        }\n        case 3: {\n          song = baseMusicUrl + 'fathers.mp3';\n          break;\n        }\n        case 4: {\n          song = baseMusicUrl + 'for_joe.mp3';\n          break;\n        }\n        case 5: {\n          song = baseMusicUrl + 'patience.mp3';\n          break;\n        }\n        case 6: {\n          song = baseMusicUrl + 'soaring_in_love.mp3';\n          break;\n        }\n        case 7: {\n          song = baseMusicUrl + 'tiamo.mp3';\n          break;\n        }\n        case 8: {\n          song = baseMusicUrl + 'waiting.mp3';\n          break;\n        }\n        default:\n          // Analytics.trackEvent('Unexpected index of next song', {\n          //   Category: 'Player',\n          // });\n          throw new Error('Unexpected index of next song');\n        }\n        resolve(song);\n    });\n    return this.nextSongPromise;\n  }\n\n\n  static playNextSong(options) {\n    const that = this;\n    const { isAutoplayingNextSong } = (options || {});\n    return new Promise((resolve, reject) => {\n      that.nextSongPromise.then((song) => {\n        that.currentSong = song;\n        if (!isAutoplayingNextSong) {\n          that.startPlayTime = new Date();\n        }\n        that.prepareNextSong();\n        const { soundRef } = options;\n        // sound is of type react-sound\n        const sound = soundRef.current;\n        sound.setState(prevState => ({\n          ...prevState,\n          url: song,\n          playStatus: Sound.status.PLAYING,\n          onFinishedPlaying: () => {\n            resolve(true);\n          },\n        }));\n        // play song here!\n        // song.play((success) => {\n        //   if (success) {\n        //     song.release();\n        //     that.currentSong = null;\n        //     resolve(success);\n        //   } else {\n        //     song.reset();\n        //     reject();\n        //   }\n        // });\n      }).catch((playError) => {\n        reject(playError);\n      });\n    });\n  }\n\n  static ensurePlaying(options) {\n    const that = this;\n    if (!that.currentSong) {\n      that.playNextSong().then((status) => { that.onSongFinished(status, options); });\n    }\n  }\n\n  static playFan() {\n    // const that = this;\n    // const returnValue = new Promise((resolve, reject) => {\n    //   that.ensureCurrentSongStopped().then(() => {\n    //     that.fanNoisePromise.then((fanNoise) => {\n    //       that.currentSong = fanNoise;\n    //       fanNoise.play((success) => {\n    //         if (success) {\n    //           fanNoise.release();\n    //           that.currentSong = null;\n    //           // reload the song for next time\n    //           that.fanNoisePromise = prepareFanNoise();\n    //           resolve(success);\n    //         } else {\n    //           fanNoise.reset();\n    //           reject();\n    //         }\n    //       });\n    //     }).catch((playFanError) => {\n    //       // Analytics.trackEvent('Error playing fan noise', {\n    //       //   Category: 'Player',\n    //       //   Error: playFanError,\n    //       // });\n    //       throw new Error(`Error playing fan noise: ${playFanError}`);\n    //     });\n    //   });\n    // });\n    // // ensure promise is called at least once\n    // returnValue.then(() => { });\n    // return returnValue;\n  }\n\n  static playFanOrPause() {\n    // const that = this;\n    // that.ensureCurrentSongStopped()\n    //   .then((stoppedSong) => {\n    //     // only start a new song if the old song was already stopped\n    //     if (stoppedSong == null) {\n    //       console.log('Playing fan');\n    //       that.playFan().then(() => console.log('Fan noise finished'));\n    //     } else {\n    //       // reload the song for next time\n    //       that.fanNoisePromise = prepareFanNoise();\n    //     }\n    //   })\n    //   .catch((stopCurrentSongError) => {\n    //     console.error('Unable to stop curent song', stopCurrentSongError);\n    //   });\n  }\n\n  static playITunesPlaylist(playlistName) {\n    // const that = this;\n    // // Analytics.trackEvent('playITunesPlaylist', { Category: 'Debug' });\n    // that.ensureCurrentSongStopped()\n    //   .then((stoppedSong) => {\n    //     if (stoppedSong == null) {\n    //       // Analytics.trackEvent('playITunesPlaylist, trying to play song', { Category: 'Debug' });\n\n    //       MusicService.playPlaylist(playlistName)\n    //         .then(() => {\n    //           // Analytics.trackEvent('playITunesPlaylist, playing song', { Category: 'Debug' });\n    //         })\n    //         .catch((playITunesTrackError) => {\n    //           // Analytics.trackEvent('Error playing iTunes track', {\n    //           //   Category: 'MusicService',\n    //           //   Error: playITunesTrackError,\n    //           // });\n    //           Alert.alert(`Error playing iTunes track: ${playITunesTrackError}`);\n    //         });\n    //     } else {\n    //       // Analytics.trackEvent('playITunesPlaylist, stopped song', { Category: 'Debug' });\n    //     }\n    //   })\n    //   .catch((err) => {\n    //     // Analytics.trackEvent('Unable to stop current song', {\n    //     //   Category: 'Player',\n    //     //   Error: err,\n    //     // });\n    //     Alert.Alert(new Error(`Unable to stop current song: ${err}`));\n    //   });\n  }\n\n  static playOrPause(options) {\n    const that = this;\n    that.ensureCurrentSongStopped(options)\n      .then((stoppedSong) => {\n        // only start a new song if the old song was already stopped\n        if (stoppedSong == null) {\n          try {\n            console.log('Playing music');\n            that.playNextSong(options).then((status) => { that.onSongFinished(status, options); });\n          } catch (error) {\n            console.error('an error occurred attempting to play music', error);\n          }\n        }\n      })\n      .catch((stopCurrentSongError) => {\n        console.error('Unable to stop curent song', stopCurrentSongError);\n      });\n  }\n\n  static ensureCurrentSongStopped(options) {\n    const that = this;\n    // Analytics.trackEvent('ensureCurrentSongStopped', { Category: 'Debug' });\n    return new Promise((resolve, reject) => {\n      // if a song is already playing, stop it.\n      const currentlyPlayingSong = that.currentSong;\n      if (currentlyPlayingSong) {\n        const sound = options.soundRef.current;\n        that.currentSong = null;\n        sound.setState(prevState => ({\n          ...prevState,\n          playStatus: Sound.status.STOPPED,\n        }));\n        resolve(currentlyPlayingSong);\n        // currentlyPlayingSong.stop(() => {\n        //   that.currentSong = null;\n        //   currentlyPlayingSong.release();\n        //   resolve(currentlyPlayingSong);\n        // });\n      } else if (Platform.OS === 'ios') {\n        // need to check if iTunes is playing\n        // Analytics.trackEvent('ensureCurrentSongStopped, stopping iTunes if playing', { Category: 'Debug' });\n        MusicService.stopSongIfPlaying(options).then((stoppedSong) => {\n          resolve(stoppedSong);\n        }).catch(reject);\n      } else {\n        resolve(null);\n      }\n    });\n  }\n\n  static onSongFinished(status, options) {\n    const that = this;\n    // play the next song if we haven't been playing already for more than, say 15 minutes\n    const now = new Date();\n    const cutoffDate = new Date(now.getTime() - 15 * 60000);\n    if (that.startPlayTime && cutoffDate > that.startPlayTime) {\n      return;\n    }\n\n    that.playNextSong({ ...options, isAutoplayingNextSong: true })\n      .then((nextStatus) => { that.onSongFinished(nextStatus, options); })\n      .catch((loadSongError) => {\n        console.error('an error occurred reading music file', loadSongError);\n      });\n  }\n}\nPlayer.prepareNextSong();\n","import Player from '../services/Player';\nimport { TICK, ALARM_TYPE_PLAY_BUILTIN_MUSIC, ALARM_TYPE_FAN } from '../store/Clock';\n\nexport default store => next => (action) => {\n  next(action);\n  if (action.type === TICK) {\n    const now = new Date();\n    const clockState = (store.getState() || {}).clock || {};\n\n    const wakeAlarm = clockState.wakeTimeState.alarmTime;\n    const sleepAlarm = clockState.sleepTimeState.alarmTime;\n\n    if (wakeAlarm.hour === now.getHours() && wakeAlarm.minute === now.getMinutes()) {\n      if (clockState.wakeTimeState.alarmAction === ALARM_TYPE_PLAY_BUILTIN_MUSIC) {\n        Player.ensurePlaying();\n      } else if (clockState.sleepTimeState.alarmAction === ALARM_TYPE_FAN) {\n        Player.playFan();\n      }\n    } else if (sleepAlarm.hour === now.getHours() && sleepAlarm.minute === now.getMinutes()) {\n      if (clockState.sleepTimeState.alarmAction === ALARM_TYPE_PLAY_BUILTIN_MUSIC) {\n        Player.ensurePlaying();\n      } else if (clockState.sleepTimeState.alarmAction === ALARM_TYPE_FAN) {\n        Player.playFan();\n      }\n    }\n  }\n};\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\n// import { persistStore, persistReducer, createTransform } from 'redux-persist';\n// import storage from 'redux-persist/lib/storage';\n// import omit from 'lodash/omit';\nimport * as Clock from './Clock';\nimport TickMiddleware from '../middleware/TickMiddleware';\nimport StarMiddleware from '../middleware/StarMiddleware';\nimport AlarmMiddleware from '../middleware/AlarmMiddleware';\n\nconst reducers = {\n  clock: Clock.reducer,\n};\n\nconst rootReducer = combineReducers({\n  ...reducers,\n});\n\n// following is to ensure some transient properties are not\n// ever persisted. From https://github.com/rt2zz/redux-persist/issues/134\nconst blacklistedProperties = [\n  'time',\n  'isSleepTime',\n  'isFullScreen',\n  'isSettingWakeUpTime',\n  'isSettingSleepTime',\n  'stars',\n];\n// const blacklistTransform = createTransform((inboundState, key) => {\n//   if (key === 'clock') {\n//     const baseState = omit(inboundState, blacklistedProperties);\n//     // \"tick\" at least once to get current time and tell if it's sleeptime or waketime\n//     return Clock.reducer(baseState, { type: Clock.TICK });\n//   }\n//   return inboundState;\n// });\n\n// const persistConfig = {\n//   key: 'root',\n//   storage,\n//   transforms: [blacklistTransform],\n// };\n\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst middlewares = [TickMiddleware, StarMiddleware/*, AlarmMiddleware*/];\n\nexport const store = createStore(rootReducer, {}, applyMiddleware(...middlewares));\n\n// export const persistor = persistStore(store);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Sound from 'react-sound';\n\n\nexport default class SoundWrapper extends Component {\n  // static propTypes = {\n  //   url: PropTypes.string,\n  //   playStatus: PropTypes.any,\n  //   onFinishedPlaying: PropTypes.func,\n  // }\n\n  // static getDefaultProps = {\n  //   url: null,\n  //   playStatus: Sound.status.STOPPED,\n  //   onFinishedPlaying: null,\n  // }\n\n  constructor() {\n    super();\n\n    this.state = {\n      url: null,\n      playStatus: Sound.status.STOPPED,\n      onFinishedPlaying: null,\n    }\n  }\n\n  render() {\n    const { url, playStatus, onFinishedPlaying } = this.state;\n\n    return (\n      <Sound url={url} playStatus={playStatus} onFinishedPlaying={onFinishedPlaying} />\n    );  \n  }\n}","// import Analytics from 'appcenter-analytics';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, View } from 'react-native';\nimport LinearGradient from 'react-native-web-linear-gradient';\nimport TimerMixin from 'react-timer-mixin';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n// import DeviceBrightness from 'react-native-device-brightness';\nimport { actionCreators } from '../store/Clock';\n\nconst darkColorBegin = { topColor: '#00192B', bottomColor: '#00477A' };\nconst darkColorEnd = { topColor: '#000B10', bottomColor: '#000A17' };\nconst lightColorBegin = { topColor: '#CACC96', bottomColor: '#CCCBBB' };\nconst lightColorEnd = { topColor: '#FCFFBC', bottomColor: '#FFFEEA' };\n// const animationTime = 15 * 60 * 1000; // in milliseconds\nconst animationStep = 100; // time between redrawing, in milliseconds\nconst sleepTimeBrightness = 0.05;\n\n\nconst hexToRgba = (hex) => {\n  if (typeof hex !== 'string' && hex.length > 0) { // is an array\n    const returnValue = [];\n    for (let i = 0; i < hex.length; i += 1) {\n      returnValue.push(hexToRgba(hex[i]));\n    }\n    return returnValue;\n  }\n\n  let c;\n  if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n    c = hex.substring(1).split('');\n    if (c.length === 3) {\n      c = [c[0], c[0], c[1], c[1], c[2], c[2]];\n    }\n    c = `0x${c.join('')}`;\n    return {\n      // eslint-disable-next-line no-bitwise\n      r: (c >> 16) & 255, g: (c >> 8) & 255, b: c & 255, a: 1,\n    };\n  }\n  // Analytics.trackEvent('Bad Hex', { Category: 'Background', Value: hex });\n  throw new Error('Bad Hex');\n};\n\nconst componentToHex = (c) => {\n  const hex = c.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n};\n\nconst rgbToHex = (r, g, b) => `#${componentToHex(Math.ceil(r))}${componentToHex(Math.ceil(g))}${componentToHex(Math.ceil(b))}`;\n\nexport class AnimatableGradient extends Component {\n  static propTypes = {\n    isSleepTime: PropTypes.bool.isRequired,\n    children: PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.node),\n      PropTypes.node,\n    ]),\n    wakeTimePostTransitionTime: PropTypes.number,\n    sleepTimePostTransitionTime: PropTypes.number,\n  }\n\n  static getDefaultProps = {\n    children: [],\n    wakeTimePostTransitionTime: 60 * 1000,\n    sleepTimePostTransitionTime: 60 * 1000,\n  }\n\n  constructor(props) {\n    super(props);\n\n    // linearGrandient needs initial colors\n    this.state = {\n      backgroundColors: ['#00192B', '#00477A'],\n    };\n  }\n\n\n  componentDidMount() {\n    this.setBackgroundColors();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const that = this;\n    console.log(`Updated props in Background at ${new Date()}`, nextProps);\n    if (that.props.isSleepTime !== nextProps.isSleepTime) {\n      // first cancel settingBackgroundColors if currently doing so\n      if (that.settingBackgroundColors) {\n        that.settingBackgroundColors.cancel = true;\n      }\n      // now change the colors for the \"begin\" color\n      const beginColors = nextProps.isSleepTime\n        ? [darkColorBegin.topColor, darkColorBegin.bottomColor]\n        : [lightColorBegin.topColor, lightColorBegin.bottomColor];\n      // DeviceBrightness.getBrightnessLevel().then((luminous) => {\n        const luminous = 1;\n        const startBrightness = nextProps.isSleepTime\n          ? 1 : sleepTimeBrightness;\n\n        const now = new Date();\n        const endAnimationTime = new Date(now.getTime() + 1000);\n        const animationFunc = that.animateBackgroundGrandient(that.state.backgroundColors,\n          beginColors, now, endAnimationTime, 50, luminous, startBrightness);\n        that.settingBackgroundColors = animationFunc;\n        animationFunc()\n          .then((animationStatus) => {\n            if (!animationStatus.cancelled) {\n              const endColors = nextProps.isSleepTime\n                ? [darkColorEnd.topColor, darkColorEnd.bottomColor]\n                : [lightColorEnd.topColor, lightColorEnd.bottomColor];\n              const endBrightness = nextProps.isSleepTime\n                ? sleepTimeBrightness : 1;\n              let postTransitionTime = nextProps.isSleepTime\n                ? nextProps.sleepTimePostTransitionTime : nextProps.wakeTimePostTransitionTime;\n              if (!postTransitionTime) {\n                postTransitionTime = 60 * 1000;\n              }\n              const animationFunc2 = that.animateBackgroundGrandient(that.state.backgroundColors,\n                endColors, now, new Date(new Date().getTime() + postTransitionTime), animationStep,\n                startBrightness, endBrightness);\n              that.settingBackgroundColors = animationFunc2;\n              animationFunc2().then(() => {});\n            }\n          });\n      // });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.settingBackgroundColors) {\n      this.settingBackgroundColors.cancel = true;\n    }\n  }\n\n  setBackgroundColors() {\n    const that = this;\n\n    let fromColors; let toColors; let enteredStateAt; let endBrightness; let postTransitionTime;\n    if (that.props.isSleepTime) {\n      fromColors = [darkColorBegin.topColor, darkColorBegin.bottomColor];\n      toColors = [darkColorEnd.topColor, darkColorEnd.bottomColor];\n      enteredStateAt = that.props.sleepTimeEnteredAt;\n      endBrightness = sleepTimeBrightness;\n      postTransitionTime = that.props.sleepTimePostTransitionTime;\n    } else {\n      fromColors = [lightColorBegin.topColor, lightColorBegin.bottomColor];\n      toColors = [lightColorEnd.topColor, lightColorEnd.bottomColor];\n      enteredStateAt = that.props.wakeTimeEnteredAt;\n      endBrightness = 1;\n      postTransitionTime = that.props.wakeTimePostTransitionTime;\n    }\n    if (enteredStateAt) {\n      // fix for the way the persistence works\n      if (typeof enteredStateAt === 'string') {\n        enteredStateAt = new Date(enteredStateAt);\n      } else if (typeof enteredStateAt.getTime !== 'function' && typeof enteredStateAt.toDate === 'function') {\n        // this is an object of type moment.  We need to convert it to an actual date object\n        enteredStateAt = enteredStateAt.toDate();\n      }\n    } else {\n      // what to do in this case?\n      enteredStateAt = new Date(1, 1, 1);\n    }\n\n    if (!postTransitionTime) {\n      postTransitionTime = 60 * 1000;\n    }\n\n    // DeviceBrightness.getBrightnessLevel().then((luminous) => {\n      const luminous = 1;\n      that.settingBackgroundColors = that.animateBackgroundGrandient(\n        fromColors,\n        toColors,\n        enteredStateAt,\n        new Date(enteredStateAt.getTime() + postTransitionTime),\n        animationStep,\n        luminous,\n        endBrightness,\n      );\n      that.settingBackgroundColors();\n    // });\n  }\n\n  animateBackgroundGrandient(fromColors, toColors, startTime, endTime, stepSize,\n    fromBrightness, toBrightness) {\n    const fromBrightnessFormatted = fromBrightness || 1;\n    const toBrightnessFormatted = toBrightness || 1;\n\n    const that = this;\n    const settingBackgroundColors1 = () => new Promise((resolve) => {\n      const settingBackgroundColors2 = () => {\n        if (settingBackgroundColors1.cancel === true) {\n          resolve({ cancelled: true });\n          return;\n        }\n\n        let currentColors; let currentBrightness; let percentDone;\n        const now = new Date();\n        if (now >= endTime) {\n          // easy case :)\n          currentColors = toColors;\n          currentBrightness = toBrightnessFormatted;\n          percentDone = 1;\n        } else if (startTime > now) {\n          // this shouldn't happen\n          currentColors = fromColors;\n          currentBrightness = fromBrightnessFormatted;\n          percentDone = 0;\n        } else {\n          percentDone = (now - startTime) / (endTime - startTime);\n\n          // note this is an array, top is first, bottom is second\n          const fromColorsHex = hexToRgba(fromColors);\n          const toColorsHex = hexToRgba(toColors);\n          currentColors = [\n            rgbToHex(\n              (toColorsHex[0].r - fromColorsHex[0].r) * percentDone + fromColorsHex[0].r,\n              (toColorsHex[0].g - fromColorsHex[0].g) * percentDone + fromColorsHex[0].g,\n              (toColorsHex[0].b - fromColorsHex[0].b) * percentDone + fromColorsHex[0].b,\n              (toColorsHex[0].a - fromColorsHex[0].a) * percentDone + fromColorsHex[0].a,\n            ),\n            rgbToHex(\n              (toColorsHex[1].r - fromColorsHex[1].r) * percentDone + fromColorsHex[1].r,\n              (toColorsHex[1].g - fromColorsHex[1].g) * percentDone + fromColorsHex[1].g,\n              (toColorsHex[1].b - fromColorsHex[1].b) * percentDone + fromColorsHex[1].b,\n              (toColorsHex[1].a - fromColorsHex[1].a) * percentDone + fromColorsHex[1].a,\n            ),\n          ];\n          currentBrightness = (toBrightnessFormatted - fromBrightnessFormatted) * percentDone\n            + fromBrightnessFormatted;\n        }\n        settingBackgroundColors1.percentDone = percentDone;\n\n        that.setState({\n          ...that.state,\n          backgroundColors: currentColors,\n        });\n\n        if (currentBrightness && currentBrightness >= 0 && currentBrightness <= 1) {\n          try {\n            // DeviceBrightness.setBrightnessLevel(currentBrightness);\n          } catch (setDeviceBrightnessError) {\n            console.log('Unable to set device brightness', setDeviceBrightnessError);\n          }\n        }\n\n        if (percentDone < 1 && that.settingBackgroundColors === settingBackgroundColors1) {\n          // then we do it again!\n          TimerMixin.setTimeout(() => { settingBackgroundColors2(); }, stepSize);\n        } else {\n          resolve({ cancelled: settingBackgroundColors1.cancel });\n        }\n      };\n      settingBackgroundColors2();\n    });\n    return settingBackgroundColors1;\n  }\n\n  render() {\n    const { backgroundColors } = this.state;\n    const { children } = this.props;\n    return (\n      <LinearGradient\n        colors={backgroundColors}\n        style={{\n          position: 'absolute',\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: 0,\n        }}\n      >\n        <View>\n          {children}\n        </View>\n      </LinearGradient>\n    );\n  }\n}\n\nexport default connect(\n  state => state.clock,\n  dispatch => bindActionCreators(actionCreators, dispatch),\n)(AnimatableGradient);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Image } from 'react-native';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { actionCreators } from '../store/Clock';\n\nclass Stars extends Component {\n  stars = [\n    {\n      width: 3,\n      height: 2,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAMAAAACCAIAAAASFvFNAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAAAaSURBVBhXY+ASN+GTtgCSDJxiRnxS5lxixgATyQIP2RIEUAAAAABJRU5ErkJggg==',\n    },\n    {\n      width: 4,\n      height: 2,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAQAAAACCAYAAAB/qH1jAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAAAlSURBVBhXY+BVcP2vZBb1X80q7j8QMDCACBUgx8gj77+Mfth/AAfqEBw2e+CdAAAAAElFTkSuQmCC',\n    },\n    {\n      width: 3,\n      height: 3,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAYAAABWKLW/AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAAAnSURBVBhXY5A2CvovZRj4HwgYwBw129j/Evr+/xlAIrzKzkDqPwMAUXMSlSydw+sAAAAASUVORK5CYII=',\n    },\n    {\n      width: 3,\n      height: 3,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAYAAABWKLW/AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAAApSURBVBhXY/j//z8Dt1IQkPrPwMClGPxfQC3yP7dSyH+wDEjg////DAB6XhN7vinP2AAAAABJRU5ErkJggg==',\n    },\n    {\n      width: 3,\n      height: 3,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAYAAABWKLW/AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAAArSURBVBhXY/j//z8Dv5IVkPrPwKBuFfw/Kqftv5Vv2n+wjJZd+H9FY5//AI5xE6kgjuN1AAAAAElFTkSuQmCC',\n    },\n    {\n      width: 3,\n      height: 3,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAYAAABWKLW/AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAAAuSURBVBhXY+CXNvnPJWHwHwgYGITlLf5Lazr+F1O1+8/AIab3n1fK6D+XpNF/ABblDghGi2THAAAAAElFTkSuQmCC',\n    },\n    {\n      width: 3,\n      height: 3,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAYAAABWKLW/AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAAAvSURBVBhXY1ByDv1vFJz6X8jA6T+DvF3Af6/M6v+qTqH/Gf7//8/AJWMKpP4zAAA+LhIOqfbCEQAAAABJRU5ErkJggg==',\n    },\n    {\n      width: 4,\n      height: 4,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAQAAAADCAIAAAA7ljmRAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAAAvSURBVBhXY+CQstKwjJbTD+KSsmHgkLS28spzCi6X1PBiYBA0FlJyUzOL4payAwCETQbUlkVd5wAAAABJRU5ErkJggg==',\n    },\n    {\n      width: 4,\n      height: 3,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAQAAAADCAYAAAC09K7GAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAAA0SURBVBhXY/j//z8Dj5zbf05pVyDzPwMDt4zbfxG1gP+Cyn5AQef/YBVcQEF2aTcg8z8DAFFrF3pnim77AAAAAElFTkSuQmCC',\n    },\n    {\n      width: 4,\n      height: 3,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAQAAAADCAYAAAC09K7GAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAAA1SURBVBhXY/j//z8Dh5jOf2YhLSDzPwMDv7TJf2V9r//yOm7/uaVM/oNVSCjb/wdhbgnj/wA/DxWmOSkS4wAAAABJRU5ErkJggg==',\n    },\n    {\n      width: 4,\n      height: 3,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAQAAAADCAYAAAC09K7GAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAAA1SURBVBhXY/j//z8Dv6Ldf1FVJyDzPwMDu6TZf1E1t//iQMwhbv4frIJZ1Og/KxD///+fAQBNMxcdWDvFLwAAAABJRU5ErkJggg==',\n    },\n    {\n      width: 4,\n      height: 3,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAQAAAADCAYAAAC09K7GAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAAA1SURBVBhXY/j//z+Dgknofyk9PyDzPwMDp5zjfyP3rP/Gntn/eZRc/oNVcAMZPMquQOZ/BgB2xBi10+82VwAAAABJRU5ErkJggg==',\n    },\n    {\n      width: 4,\n      height: 3,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAQAAAADCAYAAAC09K7GAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAAA1SURBVBhXY2CWNPzPrmD5n03e4j8QMDAwiuqBBXhU7f6zyZr9ZwCJskma/OdRtP7PIW32HwDjKhN7LlmcUgAAAABJRU5ErkJggg==',\n    },\n    {\n      width: 4,\n      height: 3,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAQAAAADCAYAAAC09K7GAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAAA3SURBVBhXY/j//z+DkLrvf04lLyDzPwMDm4TVfyENn/9CWgH/uZXc/oNVMIsZ/WeRNgMy/zMAAFQwF2XVCvUUAAAAAElFTkSuQmCC',\n    },\n    {\n      width: 4,\n      height: 3,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAQAAAADCAYAAAC09K7GAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAAA5SURBVBhXYxDWcvvvFFn0X90u6j8QMDDIGPv+r52y7n/fsv3/jb3S/jOARBUtgv/7pTb817CP+g8AhroaEUMs8loAAAAASUVORK5CYII=',\n    },\n    {\n      width: 4,\n      height: 3,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAQAAAADCAYAAAC09K7GAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAAA7SURBVBhXY2BRMv8vbRP0n1fP5T8QMDDI+cT8j5+29L9v25T/nFZe/xlYjZz+6yYV/ddLLfnPa+XzHwA5WhbgGJX6cgAAAABJRU5ErkJggg==',\n    },\n    {\n      width: 4,\n      height: 3,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAQAAAADCAYAAAC09K7GAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAAA7SURBVBhXY9BOnfw/qGf3f534Sf+BgIHBqW71/4Y9Z/4nTDn+X8qz/j+DRFDDf9uyZf9NM+cAFfxnAADiuR1XOh7zUwAAAABJRU5ErkJggg==',\n    },\n    {\n      width: 4,\n      height: 4,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAQAAAAECAYAAACp8Z5+AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAABESURBVBhXY2C2q/7P7NP6n8Gt7j8QMDAwO9X9F8+Y91++bNV/tvC+/wwgUfHUOf9tJx77r1G+FiIAwnJp8/9Lxk3/DwCNsiRwwjocWwAAAABJRU5ErkJggg==',\n    },\n    {\n      width: 5,\n      height: 3,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAUAAAADCAYAAABbNsX4AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAABGSURBVBhXYxBUcPrPK+f0n1Pc/j+ToNl/IGBgEFFz+6/vlPpf1TT2P7uEzX8WMbP/DEwipv+FVNz/8ym4/WcQAgrw6/0HAN2vFvH2/Qq5AAAAAElFTkSuQmCC',\n    },\n    {\n      width: 5,\n      height: 4,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAUAAAAECAIAAADJUWIXAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAABISURBVBhXY+BUdRXQD+DV8WWQtWMQMmFgkLaWtYszi6hScUtnkLFjYBAxYVNzU3RKUXBK5lLzYGCUsmYQNWMQs2KSd2JTdAYARPoJ6B+d820AAAAASUVORK5CYII=',\n    },\n    {\n      width: 5,\n      height: 4,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAUAAAAECAYAAABGM/VAAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAABNSURBVBhXY/j//z8Dr6zlf34l2/9sIoZA7n8GBg5R/f9SWi7/9e2j/0tpuP5nEdb7D1bJJWX8X1rL9b+UpvN/NpggWAuPGljg////DAD6siWNcfvgxAAAAABJRU5ErkJggg==',\n    },\n    {\n      width: 5,\n      height: 4,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAUAAAAECAYAAABGM/VAAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAABWSURBVBhXY9AJyvjvWdL5Xyko+T8QMIAwg21a9f/6DQf/Tzx25n/c9MX/ee0C/zNw67v9dy9s+T9p35n/LVuP/VcLSoMoZ1Oz+y9lF/xfyiEMyP3PAADB7y7H4F0M3gAAAABJRU5ErkJggg==',\n    },\n    {\n      width: 5,\n      height: 4,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAUAAAAECAYAAABGM/VAAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAABaSURBVBhXY5B0Tvsv5Jnxn8km6j+Duvt/IGBgUAor++8xYfV/u+6l/xWTGv4zGAT9Z2Cyi/5v0Dzrv8/iXf9de1f+F3DL+M8AVm4T9p87sui/eGT5f06ruP8AhnAoknEF+g0AAAAASUVORK5CYII=',\n    },\n    {\n      width: 5,\n      height: 4,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAUAAAAECAYAAABGM/VAAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAABcSURBVBhXY+BzyvsvG1T1n88h+T+Duu9/IGBgEPMp/u/Xsep/UN/a/yZZ3f/ZTKP/M3BYJ/23Kpryv2Lrmf/V2878Vwqp+s8AUs5hGfPfqWbG/6ipG/8rBZX9BwDNLSueg18ccQAAAABJRU5ErkJggg==',\n    },\n    {\n      width: 6,\n      height: 5,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAYAAAAFCAYAAABmWJ3mAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAABoSURBVBhXY/j//z8YM2g4ACkIG8wHEULh2f81Krr+C8YV/Wcw8AArYGBQt/uvVtTy33PRpv8By3f91y/u+s+g7ATRxuUe9d+yafJ/70lL/5vntf9nVLRDMtPI7T+bmfd/Fm1nIPc/AwBZ9kRkbG8gKwAAAABJRU5ErkJggg==',\n    },\n    {\n      width: 6,\n      height: 5,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAYAAAAFCAYAAABmWJ3mAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAABySURBVBhXY/j//z8Dq5HffwZtp/8MBvb/GQztgUL/GRh4jLz+O1T1/XfqnvVfr7Hjv0xSFkSCQcnsv0N5y//Uddv/p+7e99+2o+8/k7bNf7BRDLpm/yXCYv679k7+r5ZW8J9ByQQiAcMM0ppACsT+zwAAXmpCF//kyW0AAAAASUVORK5CYII=',\n    },\n    {\n      width: 6,\n      height: 5,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAYAAAAFCAYAAABmWJ3mAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAABySURBVBhXY/j//z+Ddd7M/3rJvf85HNKB3P9gMQalkLr/pevO/C9ef+a/ZeW0/5yuaWBJBi67tP8+bSv/Nx06878OiK0qZ0AkQASjVex/j5bF//PWnfxvVTL1P5tRGsQ8EGazS/ov7Jv7n9kiDsj9zwAAF7FJFgMYs50AAAAASUVORK5CYII=',\n    },\n    {\n      width: 6,\n      height: 6,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAYAAAAGCAYAAADgzO9IAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAACCSURBVBhXY+DU8vrPqevzn0Ha6j8QMMAwg7hX2n/D3Lb//AHp/xk0HOCSDHyu8f/9pqz6H7hw83/lvKb/DCZ+YEkGBh2v/2Zlff8zd535n3XozH+10vb/DPbhUG16Xv8t66b8z9t35n/02n3/xWOLkCzTcv+vnVLz36Cw7T+vR/x/AEKQUL3qb+xxAAAAAElFTkSuQmCC',\n    },\n    {\n      width: 6,\n      height: 7,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAYAAAAHCAYAAAArkDztAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAACUSURBVBhXY/j//z8Y81ilACkIG4TBhEl273/z4sn/RXwL4JIM+gnN/4vWnf6fu/7kf6emuf+V42rAkgw6CXX/Czec+N928sz/3A1H/4dPWfdfJqjoPwO7TcR/s7yO/7kr9v3vPnbmf9n64/+1Yqsh5rEbB/03ia/5nz5p/f+wxvn/ZZzSEa4AYTHzqP8iplFA5n8GAOVEabVw1ACVAAAAAElFTkSuQmCC',\n    },\n    {\n      width: 8,\n      height: 7,\n      data:\n        'iVBORw0KGgoAAAANSUhEUgAAAAgAAAAHCAYAAAA1WQxeAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNWRHWFIAAAC7SURBVBhXY/j//z8cM/CKAykEHywGIoS1tP67RUb+dw0N+69hZvVfSk0XKIykIKe5/v+u00f+Hzpz/P+6nZv+T5g1439IUgZYEQOnvNL/+indQMmD/4+d2ff/2Om9/4+cOfx/z5nT/8OLyiDGOIUG/N+6b9P/U0AFx0/uACrc/3/fmVP/s7u7EI4JCgv+P2/elP/Hju34f/TM3v+r9m35bxcXgVAAwioqSv+jooP+F1Xm/Q9IigAK/WcAAH1OluhlRlP/AAAAAElFTkSuQmCC',\n    },\n  ];\n\n  render() {\n    const that = this;\n    if (that.props.stars && that.props.stars.length > 0) {\n      let i = 0;\n      const { stars } = this.props;\n      return (\n        <View>\n          {stars.map((starInfo) => {\n            i += 1;\n            const keyName = `star_${i}`;\n            const starData = this.stars[starInfo.starIndex % this.stars.length];\n            const uri = `data:image/png;base64,${starData.data}`;\n            return (\n              <Image\n                key={keyName}\n                style={{\n                  width: starData.width,\n                  height: starData.height,\n                  position: 'absolute',\n                  left: starInfo.position.x,\n                  top: starInfo.position.y,\n                }}\n                source={{ uri }}\n              />\n            );\n          })}\n        </View>\n      );\n    }\n    return null;\n  }\n}\n\nStars.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  stars: PropTypes.array.isRequired,\n};\n\nexport default connect(\n  state => state.clock,\n  dispatch => bindActionCreators(actionCreators, dispatch),\n)(Stars);\n","/* eslint-disable react/forbid-prop-types */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport {\n  Alert,\n  Dimensions,\n  StatusBar,\n  StyleSheet,\n  Text,\n  TouchableWithoutFeedback,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport SoundWrapper from '../components/SoundWrapper';\n// import HeaderButtons, { HeaderButton, Item } from 'react-navigation-header-buttons';\n// import Sound from 'react-sound';\n// import FontAwesome from 'react-native-vector-icons/FontAwesome';\n// import KeepAwake from 'react-native-keep-awake';\n// import MaterialIcons from 'react-native-vector-icons/MaterialIcons';\n\nimport Background from '../components/Background';\nimport Stars from '../components/Stars';\nimport { actionCreators, ALARM_TYPE_FAN, ALARM_TYPE_ITUNES_PLAYLIST } from '../store/Clock';\nimport { DefaultHeaderStyle } from '../navigation/MainNavigator';\nimport Player from '../services/Player';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    backgroundColor: '#000',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '100%',\n  },\n  clockIcon: {\n    color: '#999999',\n    fontSize: 140,\n  },\n});\n\n// const MaterialHeaderButtons = passMeFurther => (\n//   // the `passMeFurther` variable here contains\n//   // props from <Item .../> as well as <HeaderButtons ... />\n//   // and it is important to pass those props to `HeaderButton`\n//   // then you may add some information like icon size or color (if you use icons)\n//   <HeaderButton {...passMeFurther} IconComponent={MaterialIcons} iconSize={32} color=\"#fff\" />\n// );\n\nclass Clock extends Component {\n  static propTypes = {\n    setScreenSize: PropTypes.func.isRequired,\n    ensureNotFullScreen: PropTypes.func.isRequired,\n    toggleFullScreen: PropTypes.func.isRequired,\n    setFullscreenTipSeen: PropTypes.func.isRequired,\n    toggleIsSleepTime: PropTypes.func.isRequired,\n    time: PropTypes.string.isRequired,\n    isSleepTime: PropTypes.bool.isRequired,\n    sleepTimeState: PropTypes.any.isRequired,\n    wakeTimeState: PropTypes.any.isRequired,\n    shouldKeepAwake: PropTypes.bool,\n    enteredFullScreenTipDoNotShowAgain: PropTypes.bool,\n  };\n\n  static getDefaultProps = {\n    shouldKeepAwake: false,\n    enteredFullScreenTipDoNotShowAgain: false,\n  };\n\n  static navigationOptions = ({ navigation }) => {\n    const params = navigation.state.params || {};\n\n    return {\n      ...DefaultHeaderStyle(navigation),\n      title: 'Sun and Stars',\n      // headerLeft: (\n      //   <HeaderButtons HeaderButtonComponent={MaterialHeaderButtons}>\n      //     <Item\n      //       title=\"Settings\"\n      //       iconName=\"settings\"\n      //       onPress={() => navigation.navigate('Settings')}\n      //     />\n      //   </HeaderButtons>\n      // ),\n      // headerRight: (\n      //   <HeaderButtons HeaderButtonComponent={MaterialHeaderButtons}>\n      //     <Item\n      //       title=\"FullScreen\"\n      //       iconName=\"fullscreen\"\n      //       onPress={() => {\n      //         params.toggleFullScreen();\n      //       }}\n      //     />\n      //   </HeaderButtons>\n      // ),\n    };\n  };\n\n  constructor() {\n    super();\n\n    this.soundRef = React.createRef();\n\n    // from https://shellmonger.com/2017/07/26/handling-orientation-changes-in-react-native/\n    const { width, height } = Dimensions.get('window');\n    this.state = {\n      orientation: width > height ? 'landscape' : 'portrait',\n      screenWidth: width,\n      screenHeight: height,\n    };\n    Dimensions.addEventListener('change', () => {\n      const newDimensions = Dimensions.get('window');\n      const { setScreenSize } = this.props;\n      this.setState(prevState => ({\n        ...prevState,\n        screenWidth: newDimensions.width,\n        screenHeight: newDimensions.height,\n        orientation: newDimensions.width > newDimensions.height ? 'landscape' : 'portrait',\n      }));\n      setScreenSize(width, height);\n    });\n  }\n\n  componentDidMount() {\n    const { setScreenSize, navigation } = this.props;\n    const { screenWidth, screenHeight } = this.state;\n\n    setScreenSize(screenWidth, screenHeight);\n\n    if (navigation) {\n      navigation.setParams({ toggleFullScreen: () => this.onToggleFullScreen() });\n    }\n  }\n\n  onToggleFullScreen() {\n    const {\n      toggleFullScreen,\n      enteredFullScreenTipDoNotShowAgain,\n      setFullscreenTipSeen,\n    } = this.props;\n    toggleFullScreen();\n    if (!enteredFullScreenTipDoNotShowAgain) {\n      Alert.alert('Tip', 'Press and hold anywhere to leave full screen mode');\n      setFullscreenTipSeen();\n    }\n  }\n\n  clockStyle() {\n    const { orientation } = this.state;\n    const isLandscape = orientation === 'landscape';\n    return {\n      flex: 1,\n      flexDirection: isLandscape ? 'row' : 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: '100%',\n    };\n  }\n\n  timeTextStyle() {\n    const { orientation, screenWidth } = this.state;\n\n    const isLandscape = orientation === 'landscape';\n    let fontSize = isLandscape ? 100 : 50;\n    // special correction for smaller screens:\n    if (isLandscape && screenWidth < 600) {\n      fontSize = 70;\n    }\n    return {\n      color: '#999999',\n      fontSize,\n      padding: 20,\n      alignItems: 'center',\n      justifyContent: 'center',\n    };\n  }\n\n  singleTap() {\n    const { isSleepTime, sleepTimeState, wakeTimeState } = this.props;\n    const alarmAction = isSleepTime ? sleepTimeState.alarmAction : wakeTimeState.alarmAction;\n    if (alarmAction === ALARM_TYPE_FAN) {\n      Player.playFanOrPause({soundRef: this.soundRef});\n    } else if (alarmAction === ALARM_TYPE_ITUNES_PLAYLIST) {\n      const playlistName = isSleepTime\n        ? sleepTimeState.alarmSubAction\n        : wakeTimeState.alarmSubAction;\n      Player.playITunesPlaylist(playlistName);\n    } else {\n      Player.playOrPause({soundRef: this.soundRef});\n    }\n  }\n\n  renderKeepAwake() {\n    const { shouldKeepAwake } = this.props;\n    if (shouldKeepAwake) {\n      // return <KeepAwake />;\n    }\n    return null;\n  }\n\n  renderClockIcon() {\n    const { isSleepTime } = this.props;\n    if (isSleepTime) {\n      return <i class=\"fa fa-moon-o clockIcon\"></i>;\n      // return <FontAwesome name=\"moon-o\" style={styles.clockIcon} />;\n      return null;\n    }\n\n    \n    // return <FontAwesome name=\"sun-o\" style={styles.clockIcon} />;\n    return <i class=\"fa fa-sun-o clockIcon\" ></i>;\n    return null;\n  }\n\n  render() {\n    const { ensureNotFullScreen, toggleIsSleepTime, time } = this.props;\n    return (\n      <TouchableWithoutFeedback onLongPress={ensureNotFullScreen} onPress={() => this.singleTap()}>\n        <View style={[styles.container, { height: 362 }]}>\n          <StatusBar style={{ backgroundColor: 'transparent' }} hidden />\n          <Background\n            style={{\n              position: 'absolute',\n              left: 0,\n              right: 0,\n              top: 0,\n              bottom: 0,\n            }}\n          />\n          <Stars />\n          <View style={this.clockStyle()}>\n            <TouchableHighlight onPress={toggleIsSleepTime}>\n              <View>\n                {this.renderClockIcon()}\n              </View>\n            </TouchableHighlight>\n            <Text style={this.timeTextStyle()} numberOfLines={1} onPress={() => this.singleTap()}>\n              {time}\n            </Text>\n          </View>\n          <SoundWrapper ref={this.soundRef} />\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  }\n}\n\nexport default connect(\n  state => state.clock,\n  dispatch => bindActionCreators(actionCreators, dispatch),\n)(Clock);\n","import React from 'react';\nimport {\n  Dimensions,\n  Modal,\n  Platform,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport PropTypes from 'prop-types';\n// import AndroidExtraDimensions from 'react-native-extra-dimensions-android';\n\nconst styles = StyleSheet.create({\n  button: {\n    padding: 12,\n    margin: 16,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 4,\n    borderColor: 'rgba(0, 0, 0, 0.1)',\n  },\n});\n\nexport default class EnhancedPopup extends React.PureComponent {\n  static propTypes = {\n    visible: PropTypes.bool.isRequired,\n    children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n    onCancelPressed: PropTypes.func,\n    onConfirmPressed: PropTypes.func,\n    showCancelButton: PropTypes.bool,\n    showConfirmButton: PropTypes.bool,\n  };\n\n  static getDefaultProps = {\n    children: [],\n    showCancelButton: false,\n    showConfirmButton: true,\n    onCancelPressed: null,\n    onConfirmPressed: null,\n  };\n\n  static modalViewWrapperStyle(deviceWidth) {\n    // should check for platform here\n    // and return different styles accordingly\n    return {\n      padding: 20,\n      backgroundColor: 'white',\n      width: deviceWidth - 40,\n    };\n  }\n\n  static commandButtonsWrapperStyle(deviceWidth) {\n    // should check for platform here\n    // and return different styles accordingly\n    return {\n      padding: 20,\n      backgroundColor: 'white',\n      width: deviceWidth - 40,\n    };\n  }\n\n  onCancelButtonPressed() {\n    const { onCancelPressed } = this.props;\n    if (onCancelPressed) {\n      onCancelPressed();\n    }\n  }\n\n  onConfirmButtonPressed() {\n    const { onConfirmPressed } = this.props;\n    if (onConfirmPressed) {\n      onConfirmPressed();\n    }\n  }\n\n  renderControlButtons() {\n    const returnValue = [];\n    let { showCancelButton, showConfirmButton } = this.props;\n    if (typeof showCancelButton === 'undefined') {\n      showCancelButton = false;\n    }\n    if (typeof showConfirmButton === 'undefined') {\n      showConfirmButton = true;\n    }\n    if (Platform.OS === 'ios') {\n      if (showCancelButton) {\n        returnValue.push(\n          <TouchableOpacity key=\"cancelButton\" onPress={() => this.onConfirmButtonPressed()}>\n            <View style={styles.button}>\n              <Text>Cancel</Text>\n            </View>\n          </TouchableOpacity>,\n        );\n      }\n      if (showConfirmButton) {\n        returnValue.push(\n          <TouchableOpacity key=\"confirmButton\" onPress={() => this.onConfirmButtonPressed()}>\n            <View style={styles.button}>\n              <Text>OK</Text>\n            </View>\n          </TouchableOpacity>,\n        );\n      }\n    } else {\n      const androidButtonTextColor = '#0E9B8E';\n      if (showCancelButton) {\n        returnValue.push(\n          <TouchableOpacity key=\"cancelButton\" onPress={() => this.onConfirmButtonPressed()}>\n            <View style={styles.button}>\n              <Text style={{ color: androidButtonTextColor }}>Cancel</Text>\n            </View>\n          </TouchableOpacity>,\n        );\n      }\n      if (showConfirmButton) {\n        returnValue.push(\n          <TouchableOpacity key=\"confirmButton\" onPress={() => this.onConfirmButtonPressed()}>\n            <View style={styles.button}>\n              <Text style={{ color: androidButtonTextColor }}>OK</Text>\n            </View>\n          </TouchableOpacity>,\n        );\n      }\n    }\n    return returnValue;\n  }\n\n  render() {\n    const { children, visible } = this.props;\n    const deviceWidth = Dimensions.get('window').width;\n    // const deviceHeight = Platform.OS === 'ios'\n    //   ? Dimensions.get('window').height\n    //   : AndroidExtraDimensions.get('REAL_WINDOW_HEIGHT');\n    const deviceHeight = Dimensions.get('window').height;\n\n    return (\n      <Modal\n        onRequestClose={() => {}}\n        animationType=\"fade\"\n        transparent\n        visible={visible}\n        deviceWidth={deviceWidth}\n        deviceHeight={deviceHeight}\n        backdropOpacity={0.5}\n      >\n        <View\n          style={{\n            flex: 1,\n            alignItems: 'center',\n            justifyContent: 'center',\n            backgroundColor: 'rgba(0,0,0,0.5)',\n          }}\n        >\n          <View\n            style={EnhancedPopup.modalViewWrapperStyle(deviceWidth)}\n          >\n            {children}\n          </View>\n          <View style={EnhancedPopup.commandButtonsWrapperStyle(deviceWidth)}>\n            {this.renderControlButtons()}\n          </View>\n        </View>\n      </Modal>\n    );\n  }\n}\n","/* eslint-disable react/forbid-prop-types */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  StyleSheet, Text, View,\n} from 'react-native';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n// import SettingsList from 'react-native-settings-list';\nimport moment from 'moment';\n// import FontAwesome from 'react-native-vector-icons/FontAwesome';\nimport { actionCreators } from '../store/Clock';\nimport { DefaultHeaderStyle } from '../navigation/MainNavigator';\nimport EnhancedPopup from '../components/EnhancedPopup';\n\nconst styles = StyleSheet.create({\n  fontAwesomeSettingsIcon: {\n    textAlignVertical: 'center',\n    color: 'green',\n    fontSize: 20,\n  },\n  emptySettingsIcon: {\n    width: 20,\n  },\n  modalView: {\n    backgroundColor: 'white',\n    margin: 0,\n  },\n  aboutText: {\n    marginTop: 10,\n  },\n});\n\nclass Settings extends Component {\n  static propTypes = {\n    allowAnalytics: PropTypes.bool,\n    setAnalyticsAllowed: PropTypes.func.isRequired,\n    wakeTimeState: PropTypes.any.isRequired,\n    sleepTimeState: PropTypes.any.isRequired,\n    navigation: PropTypes.any.isRequired,\n  };\n\n  static getDefaultProps = {\n    allowAnalytics: false,\n  };\n\n  static navigationOptions = ({ navigation }) => ({\n    ...DefaultHeaderStyle(navigation),\n    title: 'Settings',\n  });\n\n  static getAlarmTimeAsDate(alarmTime) {\n    const now = new Date();\n    now.setHours(alarmTime.hour);\n    now.setMinutes(alarmTime.minute);\n    // ensure we also go forward in time\n    if (now < new Date()) {\n      now.setDate(now.getDate() + 1);\n    }\n    return now;\n  }\n\n  static formatAlarmTime(alarmTime) {\n    const theTimeFormatted = moment();\n    theTimeFormatted.hour(alarmTime.hour);\n    theTimeFormatted.minute(alarmTime.minute);\n    return theTimeFormatted.format('LT');\n  }\n\n  constructor() {\n    super();\n\n    this.state = {\n      isAboutModalVisible: false,\n    };\n  }\n\n  onAboutPopupConfirmPressed() {\n    this.setState(prevState => ({\n      ...prevState,\n      isAboutModalVisible: false,\n    }));\n  }\n\n  getIsAnalyticsSelectedIcon() {\n    const { allowAnalytics } = this.props;\n\n    if (allowAnalytics) {\n      // return <FontAwesome name=\"check\" style={styles.fontAwesomeSettingsIcon} />;\n      return null;\n    }\n    return <Text style={styles.emptySettingsIcon} />;\n  }\n\n  render() {\n    const {\n      wakeTimeState,\n      sleepTimeState,\n      navigation,\n      setAnalyticsAllowed,\n      allowAnalytics,\n    } = this.props;\n    const { isAboutModalVisible } = this.state;\n\n    return (\n      <View>\n        <EnhancedPopup\n          visible={isAboutModalVisible}\n          onConfirmPressed={() => this.onAboutPopupConfirmPressed()}\n        >\n          <View style={styles.modalView}>\n            <Text style={styles.aboutText}>Sun and Stars 1.0</Text>\n            <Text style={styles.aboutText}>by Dan and Larissa Chenier</Text>\n            <Text style={styles.aboutText}>Built in Music © Larissa Chenier</Text>\n          </View>\n        </EnhancedPopup>\n\n        {/* <SettingsList>\n          <SettingsList.Item\n            title=\"Wake Time\"\n            titleInfo={Settings.formatAlarmTime(wakeTimeState.alarmTime)}\n            onPress={() => navigation.navigate('WakeTimeSettings')}\n          />\n          <SettingsList.Item\n            title=\"Sleep Time\"\n            titleInfo={Settings.formatAlarmTime(sleepTimeState.alarmTime)}\n            onPress={() => navigation.navigate('SleepTimeSettings')}\n          />\n          <SettingsList.Item\n            title=\"Send Usage\"\n            titleInfo=\"Send anonymous usage\"\n            onPress={() => setAnalyticsAllowed(!allowAnalytics)}\n            icon={this.getIsAnalyticsSelectedIcon()}\n          />\n          <SettingsList.Item\n            title=\"About\"\n            titleInfo=\"Sun and Stars 1.0\"\n            onPress={() => this.setState(prevState => ({\n              ...prevState,\n              isAboutModalVisible: true,\n            }))\n            }\n          />\n        </SettingsList> */}\n      </View>\n    );\n  }\n}\n\nexport default connect(\n  state => state.clock,\n  dispatch => bindActionCreators(actionCreators, dispatch),\n)(Settings);\n","/* eslint-disable react/forbid-prop-types */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, View, StyleSheet } from 'react-native';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n// import SettingsList from 'react-native-settings-list';\n// import DateTimePicker from 'react-native-modal-datetime-picker';\n// import FontAwesome from 'react-native-vector-icons/FontAwesome';\nimport moment from 'moment';\n\nimport { DefaultHeaderStyle } from '../navigation/MainNavigator';\nimport {\n  actionCreators,\n  ALARM_TYPE_NONE,\n  ALARM_TYPE_PLAY_BUILTIN_MUSIC,\n  ALARM_TYPE_FAN,\n} from '../store/Clock';\n\nconst styles = StyleSheet.create({\n  settingsHeader: {\n    paddingTop: 25,\n  },\n  fontAwesomeSettingsIcon: {\n    textAlignVertical: 'center',\n    color: 'green',\n    fontSize: 20,\n  },\n  emptySettingsIcon: {\n    width: 20,\n  },\n});\n\nclass WakeTimeSettingsScreen extends Component {\n  static propTypes = {\n    setWakeAlarmType: PropTypes.func.isRequired,\n    setManualWakeType: PropTypes.func.isRequired,\n    startSettingWakeUpAlarmTime: PropTypes.func.isRequired,\n    endSettingWakeUpAlarmTime: PropTypes.func.isRequired,\n    cancelSetWakeUpAlarmTime: PropTypes.func.isRequired,\n    isSettingWakeUpTime: PropTypes.bool,\n    wakeTimeState: PropTypes.any.isRequired,\n  };\n\n  static getDefaultProps = {\n    isSettingWakeUpTime: false,\n  };\n\n  static navigationOptions = ({ navigation }) => ({\n    ...DefaultHeaderStyle(navigation),\n    title: 'Wake Settings',\n  });\n\n  static formatAlarmTime(alarmTime) {\n    const theTimeFormatted = moment();\n    theTimeFormatted.hour(alarmTime.hour);\n    theTimeFormatted.minute(alarmTime.minute);\n    return theTimeFormatted.format('LT');\n  }\n\n  static getAlarmTimeAsDate(alarmTime) {\n    const now = new Date();\n    now.setHours(alarmTime.hour);\n    now.setMinutes(alarmTime.minute);\n    // ensure we also go forward in time\n    if (now < new Date()) {\n      now.setDate(now.getDate() + 1);\n    }\n    return now;\n  }\n\n  onWakeTimeOptionDoNothing() {\n    const { setWakeAlarmType } = this.props;\n    setWakeAlarmType(ALARM_TYPE_NONE);\n  }\n\n  onWakeTimeOptionPlayMusic() {\n    const { setWakeAlarmType } = this.props;\n    setWakeAlarmType(ALARM_TYPE_PLAY_BUILTIN_MUSIC);\n  }\n\n  onWakeTimeOptionPlayFanNoise() {\n    const { setWakeAlarmType } = this.props;\n    setWakeAlarmType(ALARM_TYPE_FAN);\n  }\n\n  onManualWakeTimeOptionDoNothing() {\n    const { setManualWakeType } = this.props;\n    setManualWakeType(ALARM_TYPE_NONE);\n  }\n\n  onManualWakeTimeOptionPlayMusic() {\n    const { setManualWakeType } = this.props;\n    setManualWakeType(ALARM_TYPE_PLAY_BUILTIN_MUSIC);\n  }\n\n  getSelectedIcon(alarmType) {\n    const { wakeTimeState } = this.props;\n    if (alarmType === wakeTimeState.alarmAction) {\n      // return <FontAwesome name=\"check\" style={styles.fontAwesomeSettingsIcon} />;\n      return null;\n    }\n    return <Text style={styles.emptySettingsIcon} />;\n  }\n\n  getManualSelectedIcon(alarmType) {\n    const { wakeTimeState } = this.props;\n    if (alarmType === wakeTimeState.manualTriggerAction) {\n      // return <FontAwesome name=\"check\" style={styles.fontAwesomeSettingsIcon} />;\n      return null;\n    }\n    return <Text style={styles.emptySettingsIcon} />;\n  }\n\n  render() {\n    const {\n      wakeTimeState,\n      startSettingWakeUpAlarmTime,\n      isSettingWakeUpTime,\n      endSettingWakeUpAlarmTime,\n      cancelSetWakeUpAlarmTime,\n    } = this.props;\n    return (\n      <View>\n\n        {/* <DateTimePicker\n          isVisible={isSettingWakeUpTime}\n          mode=\"time\"\n          datePickerModeAndroid=\"spinner\"\n          date={WakeTimeSettingsScreen.getAlarmTimeAsDate(wakeTimeState.alarmTime)}\n          onConfirm={endSettingWakeUpAlarmTime}\n          onCancel={cancelSetWakeUpAlarmTime}\n        /> */}\n      </View>\n    );\n  }\n}\n\nexport default connect(\n  state => state.clock,\n  dispatch => bindActionCreators(actionCreators, dispatch),\n)(WakeTimeSettingsScreen);\n","/* eslint-disable react/forbid-prop-types */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Platform, StyleSheet, Text, View,\n} from 'react-native';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n// import SettingsList from 'react-native-settings-list';\n// import DateTimePicker from 'react-native-modal-datetime-picker';\n// import FontAwesome from 'react-native-vector-icons/FontAwesome';\nimport moment from 'moment';\n// import NumericInput from 'react-native-numeric-input';\n\nimport EnhancedPopup from '../components/EnhancedPopup';\nimport { DefaultHeaderStyle } from '../navigation/MainNavigator';\nimport {\n  actionCreators,\n  ALARM_TYPE_NONE,\n  ALARM_TYPE_PLAY_BUILTIN_MUSIC,\n  ALARM_TYPE_FAN,\n  ALARM_TYPE_ITUNES_PLAYLIST,\n} from '../store/Clock';\n\nconst styles = StyleSheet.create({\n  settingsHeader: {\n    paddingTop: 25,\n  },\n  fontAwesomeSettingsIcon: {\n    textAlignVertical: 'center',\n    color: 'green',\n    fontSize: 20,\n  },\n  emptySettingsIcon: {\n    width: 20,\n  },\n  modalView: {\n    backgroundColor: 'white',\n    margin: 0,\n  },\n});\n\nclass SleepTimeSettingsScreen extends Component {\n  static propTypes = {\n    setSleepAlarmType: PropTypes.func.isRequired,\n    setManualSleepType: PropTypes.func.isRequired,\n    startSettingSleepAlarmTime: PropTypes.func.isRequired,\n    setSleepMusicTime: PropTypes.func.isRequired,\n    isSettingSleepTime: PropTypes.bool,\n    endSettingSleepAlarmTime: PropTypes.func.isRequired,\n    cancelSetSleepAlarmTime: PropTypes.func.isRequired,\n    sleepTimeState: PropTypes.any.isRequired,\n  };\n\n  static getDefaultProps = {\n    isSettingSleepTime: false,\n  };\n\n  static navigationOptions = ({ navigation }) => ({\n    ...DefaultHeaderStyle(navigation),\n    title: 'Sleep Settings',\n  })\n  ;\n\n  static formatAlarmTime(alarmTime) {\n    const theTimeFormatted = moment();\n    theTimeFormatted.hour(alarmTime.hour);\n    theTimeFormatted.minute(alarmTime.minute);\n    return theTimeFormatted.format('LT');\n  }\n\n  static getAlarmTimeAsDate(alarmTime) {\n    const now = new Date();\n    now.setHours(alarmTime.hour);\n    now.setMinutes(alarmTime.minute);\n    // ensure we also go forward in time\n    if (now < new Date()) {\n      now.setDate(now.getDate() + 1);\n    }\n    return now;\n  }\n\n  static formatPlayMusicFor(minutes) {\n    if (!minutes) {\n      return '15 minutes';\n    }\n    return `${minutes} minutes`;\n  }\n\n  constructor() {\n    super();\n\n    this.state = {\n      playMusicForModalVisible: false,\n      minimumHoursForMusic: 0,\n      minimumMinutesForMusic: 15,\n      isMinumimTimeForMusicDirty: false,\n    };\n\n    // this is needed because of the way the popup doesn't re-render on this state change\n    // see https://stackoverflow.com/questions/37647061/how-do-i-access-refs-of-a-child-component-in-the-parent-component\n    this.hoursNumericElement = React.createRef();\n    this.minutesNumericElement = React.createRef();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { sleepTimeState } = nextProps;\n    let { stopMusicAfterMinutes } = sleepTimeState;\n    if (!stopMusicAfterMinutes) {\n      stopMusicAfterMinutes = 15;\n    }\n    const minimumMinutesForMusic = stopMusicAfterMinutes % 60;\n    const minumumHoursForMusic = (stopMusicAfterMinutes - minimumMinutesForMusic) / 60;\n    const { isMinumimTimeForMusicDirty } = this.state;\n    if (!isMinumimTimeForMusicDirty) {\n      this.state = (prevState => ({\n        ...prevState,\n        minimumHoursForMusic: minumumHoursForMusic,\n        minimumMinutesForMusic,\n      }));\n    }\n  }\n\n  onSleepTimeOptionDoNothing() {\n    const { setSleepAlarmType } = this.props;\n    setSleepAlarmType(ALARM_TYPE_NONE);\n  }\n\n  onSleepTimeOptionPlayMusic() {\n    const { setSleepAlarmType } = this.props;\n    setSleepAlarmType(ALARM_TYPE_PLAY_BUILTIN_MUSIC);\n  }\n\n  onSleepTimeOptionPlayFanNoise() {\n    const { setSleepAlarmType } = this.props;\n    setSleepAlarmType(ALARM_TYPE_FAN);\n  }\n\n  onManualSleepTimeOptionDoNothing() {\n    const { setManualSleepType } = this.props;\n    setManualSleepType(ALARM_TYPE_NONE);\n  }\n\n  onManualSleepTimeOptionPlayMusic() {\n    const { setManualSleepType } = this.props;\n    setManualSleepType(ALARM_TYPE_PLAY_BUILTIN_MUSIC);\n  }\n\n  onPlayMusicForClick() {\n    this.setState(prevState => ({\n      ...prevState,\n      playMusicForModalVisible: true,\n    }));\n  }\n\n\n  onMinimumHoursForMusicChanged(timeAmount) {\n    this.setState(prevState => ({\n      ...prevState,\n      minimumHoursForMusic: timeAmount,\n      isMinumimTimeForMusicDirty: true,\n    }));\n    this.hoursNumericElement.current.forceUpdate();\n  }\n\n  onMinimumMinutesForMusicChanged(timeAmount) {\n    this.setState(prevState => ({\n      ...prevState,\n      minimumMinutesForMusic: timeAmount,\n      isMinumimTimeForMusicDirty: true,\n    }));\n    this.minutesNumericElement.current.forceUpdate();\n  }\n\n  onSelectPlayMusicTimePopupCancelPressed() {\n    const { sleepTimeState } = this.props;\n    let { stopMusicAfterMinutes } = sleepTimeState;\n    if (!stopMusicAfterMinutes) {\n      stopMusicAfterMinutes = 15;\n    }\n    const minimumMinutesForMusic = stopMusicAfterMinutes % 60;\n    const minumumHoursForMusic = (stopMusicAfterMinutes - minimumMinutesForMusic) / 60;\n    this.state = (prevState => ({\n      ...prevState,\n      playMusicForModalVisible: false,\n      isMinumimTimeForMusicDirty: false,\n      minimumHoursForMusic: minumumHoursForMusic,\n      minimumMinutesForMusic,\n    }));\n  }\n\n  onSelectPlayMusicTimePopupConfirmPressed() {\n    const { setSleepMusicTime } = this.props;\n    const { minimumHoursForMusic, minimumMinutesForMusic } = this.state;\n    setSleepMusicTime(minimumHoursForMusic * 60 + minimumMinutesForMusic);\n    this.setState(prevState => ({\n      ...prevState,\n      playMusicForModalVisible: false,\n      isMinumimTimeForMusicDirty: false,\n    }));\n  }\n\n  getSelectedIcon(alarmType) {\n    const { sleepTimeState } = this.props;\n    if (alarmType === sleepTimeState.alarmAction) {\n      // return <FontAwesome name=\"check\" style={styles.fontAwesomeSettingsIcon} />;\n      return null;\n    }\n    return <Text style={styles.emptySettingsIcon} />;\n  }\n\n  getManualSelectedIcon(alarmType) {\n    const { sleepTimeState } = this.props;\n\n    if (alarmType === sleepTimeState.manualTriggerAction) {\n      // return <FontAwesome name=\"check\" style={styles.fontAwesomeSettingsIcon} />;\n      return null;\n    }\n    return <Text style={styles.emptySettingsIcon} />;\n  }\n\n  renderItunesIfIOS() {\n    if (Platform.OS === 'ios') {\n      const { navigation, sleepTimeState } = this.props;\n      const playlistSong = sleepTimeState.alarmSubAction ? sleepTimeState.alarmSubAction : '';\n      return (\n        // <SettingsList.Item\n        //   title=\"Play playlist\"\n        //   titleInfo={playlistSong}\n        //   icon={this.getSelectedIcon(ALARM_TYPE_ITUNES_PLAYLIST)}\n        //   hasNavArrow={false}\n        //   onPress={() => navigation.navigate('SleepTimeItunesMusicSettings')}\n        // />\n        null\n      );\n    }\n    return (null);\n  }\n\n\n  render() {\n    const {\n      sleepTimeState,\n      startSettingSleepAlarmTime,\n      isSettingSleepTime,\n      endSettingSleepAlarmTime,\n      cancelSetSleepAlarmTime,\n    } = this.props;\n    const { playMusicForModalVisible, minimumHoursForMusic, minimumMinutesForMusic } = this.state;\n    return (\n      <View>\n        <EnhancedPopup\n          visible={playMusicForModalVisible}\n          showCancelButto\n          showConfirmButton\n          onCancelPressed={() => this.onSelectPlayMusicTimePopupCancelPressed()}\n          onConfirmPressed={() => this.onSelectPlayMusicTimePopupConfirmPressed()}\n        >\n          <View style={styles.modalView}>\n            <Text>\n              Please select (the) amount of minimum amount of time\n              music should play\n            </Text>\n            <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n              {/* <NumericInput\n                ref={this.hoursNumericElement}\n                type=\"up-down\"\n                minValue={0}\n                maxValue={4}\n                step={1}\n                value={minimumHoursForMusic}\n                onChange={value => this.onMinimumHoursForMusicChanged(value)}\n              />\n              <Text>Hours </Text>\n              <NumericInput\n                ref={this.minutesNumericElement}\n                minValue={0}\n                maxValue={59}\n                step={1}\n                value={minimumMinutesForMusic}\n                onChange={value => this.onMinimumMinutesForMusicChanged(value)}\n              />\n              <Text>Minutes</Text> */}\n            </View>\n            <Text>Or select to play until manually stopped by tapping the screen:</Text>\n            <Text>[Button goes here]</Text>\n          </View>\n        </EnhancedPopup>\n        {/* <DateTimePicker\n          isVisible={isSettingSleepTime}\n          mode=\"time\"\n          datePickerModeAndroid=\"spinner\"\n          date={SleepTimeSettingsScreen.getAlarmTimeAsDate(sleepTimeState.alarmTime)}\n          onConfirm={endSettingSleepAlarmTime}\n          onCancel={cancelSetSleepAlarmTime}\n        /> */}\n      </View>\n    );\n  }\n}\n\nexport default connect(\n  state => state.clock,\n  dispatch => bindActionCreators(actionCreators, dispatch),\n)(SleepTimeSettingsScreen);\n","/* eslint-disable react/forbid-prop-types */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Alert, View, Text, StyleSheet,\n} from 'react-native';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n// import SettingsList from 'react-native-settings-list';\n// import FontAwesome from 'react-native-vector-icons/FontAwesome';\nimport { DefaultHeaderStyle } from '../navigation/MainNavigator';\nimport { actionCreators, ALARM_TYPE_ITUNES_PLAYLIST } from '../store/Clock';\nimport MusicService from '../services/MusicService';\n\nconst styles = StyleSheet.create({\n  fontAwesomeSettingsIcon: {\n    textAlignVertical: 'center',\n    color: 'green',\n    fontSize: 20,\n  },\n  emptySettingsIcon: {\n    width: 20,\n  },\n});\n\nclass SleepTimeITunesSelection extends Component {\n  static propTypes = {\n    setSleepAlarmType: PropTypes.func.isRequired,\n    sleepTimeState: PropTypes.any.isRequired,\n  };\n\n  static navigationOptions = ({ navigation }) => ({\n    ...DefaultHeaderStyle(navigation),\n    title: 'Music',\n  });\n\n  constructor() {\n    super();\n    this.state = { playlists: [] };\n  }\n\n  componentDidMount() {\n    MusicService.getPlaylists().then((playlists) => {\n      this.setState(prevState => ({\n        ...prevState,\n        playlists,\n      }));\n    }).catch((getPlaylistsError) => {\n      Alert.Alert(`Unable to get playlists: ${getPlaylistsError}`);\n    });\n  }\n\n  getSelectedIcon(playlistName) {\n    const { sleepTimeState } = this.props;\n    if (\n      ALARM_TYPE_ITUNES_PLAYLIST === sleepTimeState.alarmAction\n      && sleepTimeState.alarmSubAction === playlistName\n    ) {\n      // return <FontAwesome name=\"check\" style={styles.fontAwesomeSettingsIcon} />;\n      return null;\n    }\n    return <Text style={styles.emptySettingsIcon} />;\n  }\n\n  getPlaylistsAsSettings() {\n    const { playlists } = this.state;\n    const { setSleepAlarmType } = this.props;\n    // a playlist has a name, playCount and tracks (tracks are of type TrackItem[])\n    const items = playlists.map(playlist => (\n      // <SettingsList.Item\n      //   title={playlist.name}\n      //   key=\"name\"\n      //   icon={this.getSelectedIcon(playlist.name)}\n      //   hasNavArrow={false}\n      //   onPress={() => {\n      //     setSleepAlarmType(ALARM_TYPE_ITUNES_PLAYLIST, playlist.name);\n      //   }}\n      // />\n      null\n    ));\n    return items;\n  }\n\n  render() {\n    return (\n      <View>\n        {/* <SettingsList>{this.getPlaylistsAsSettings()}</SettingsList> */}\n      </View>\n    );\n  }\n}\n\nexport default connect(\n  state => state.clock,\n  dispatch => bindActionCreators(actionCreators, dispatch),\n)(SleepTimeITunesSelection);\n","import React, { Component } from 'react';\nimport { View, Text } from 'react-native';\nimport PropTypes from 'prop-types';\nimport { createSwitchNavigator } from \"@react-navigation/core\";\nimport { createBrowserApp } from \"@react-navigation/web\";\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n// import HeaderButtons, { HeaderButton, Item } from 'react-navigation-header-buttons';\n// import FontAwesome from 'react-native-vector-icons/FontAwesome';\nimport ClockScreen from '../screens/ClockScreen';\nimport SettingsScreen from '../screens/SettingsScreen';\nimport WakeTimeSettings from '../screens/WakeTimeSettingsScreen';\nimport SleepTimeSettings from '../screens/SleepTimeSettingsScreen';\nimport SleepTimeITunesSelection from '../screens/SleepTimeItunesSelectionScreen';\nimport { actionCreators } from '../store/Clock';\n\n// const MaterialHeaderButtons = passMeFurther => (\n//   // the `passMeFurther` variable here contains\n//   // props from <Item .../> as well as <HeaderButtons ... />\n//   // and it is important to pass those props to `HeaderButton`\n//   // then you may add some information like icon size or color (if you use icons)\n//   <HeaderButton {...passMeFurther} IconComponent={FontAwesome} iconSize={32} color=\"#fff\" />\n// );\n\nexport const DefaultHeaderStyle = navigation => ({\n  headerStyle: {\n    backgroundColor: '#C6DBFF',\n  },\n  headerTintColor: '#fff',\n  headerTitleStyle: {\n    fontWeight: 'bold',\n  },\n  // headerRight: (\n  //   <HeaderButtons HeaderButtonComponent={MaterialHeaderButtons}>\n  //     <Item\n  //       title=\"Close Settings\"\n  //       iconName=\"clock-o\"\n  //       onPress={() => {\n  //         navigation.popToTop();\n  //       }}\n  //     />\n  //   </HeaderButtons>\n  // ),\n});\n\nconst RootStack = createSwitchNavigator({\n  Home: {\n    screen: ClockScreen,\n  },\n  Settings: {\n    screen: SettingsScreen,\n  },\n  WakeTimeSettings: {\n    screen: WakeTimeSettings,\n  },\n  SleepTimeSettings: {\n    screen: SleepTimeSettings,\n  },\n  SleepTimeItunesMusicSettings: {\n    screen: SleepTimeITunesSelection,\n  },\n});\n\nconst AppContainer = createBrowserApp(RootStack);\n\nclass MainNavigator extends Component {\n  static propTypes = {\n    isFullScreen: PropTypes.bool,\n  };\n\n  static getDefaultProps = {\n    isFullScreen: false,\n  };\n\n  renderStackOrFullscreenClock() {\n    const { isFullScreen } = this.props;\n    if (isFullScreen) {\n      return <ClockScreen />;\n    }\n    return <AppContainer />;\n  }\n\n  render() {\n    return <ClockScreen />;\n  }\n}\n\nexport default connect(\n  state => state.clock,\n  dispatch => bindActionCreators(actionCreators, dispatch),\n)(MainNavigator);\n","import React, { Component } from 'react';\nimport { Text } from 'react-native';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './store/configureStore';\nimport MainNavigator from './navigation/MainNavigator';\n\nexport default class App extends Component {\n\n  render() {\n    return (\n      <Provider store={store}>\n          <MainNavigator />\n      </Provider>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}